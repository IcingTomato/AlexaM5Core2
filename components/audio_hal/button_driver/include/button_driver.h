// Copyright 2018 Espressif Systems (Shanghai) PTE LTD
// All rights reserved.

#ifndef _BUTTON_DRIVER_H_
#define _BUTTON_DRIVER_H_

#include <esp_err.h>

/** Possible button driver events which can be generated by the button_driver and are handled by va_button */
typedef enum {
    /** Tap to talk */
    BUTTON_EVENT_TAP_TO_TALK = 0,
    /** Microphone mute or unmute */
    BUTTON_EVENT_MIC_MUTE,
    /** Volume up */
    BUTTON_EVENT_VOLUME_UP,
    /** Volume down */
    BUTTON_EVENT_VOLUME_DOWN,
    /** Factory reset */
    BUTTON_EVENT_FACTORY_RST,
    /** Can be customised for action in va_button */
    BUTTON_EVENT_CUSTOM_1,
    /** Can be customised for action in va_button */
    BUTTON_EVENT_CUSTOM_2,
    /** Idle state. Example: for ADC, the value where no buttons are pressed. for GPIO, can be -1. */
    BUTTON_EVENT_IDLE,
    /** Max events */
    BUTTON_EVENT_MAX,
} button_event_t;

/** Button driver configuration */
typedef struct {
    /** The value of the button event. This can also be a combination of buttons.
    For ADC, it is the ADC value. Example: (1500).
    For GPIO, it is the OR list of the gpio buttons. Example: (1 << 15) for GPIO_NUM_15.
    */
    int64_t button_val[BUTTON_EVENT_MAX];
    /** Tolerence for button_val. This can be used for ADC. */
    uint16_t tolerance;
    /** Channel number, if any. This is used for ADC. */
    uint16_t ch_num;
} button_driver_config_t;

/** Button get event
 *
 * This API returns the current event on the button. It returns `BUTTON_EVENT_IDLE` if no buttons are pressed.
 *
 * This can be a blocking call in case of low power drivers.
 *
 * @return button_event_t
 */
button_event_t button_driver_get_event();

/** Enable debug
 *
 * Enable debug information.
 *
 * @param[in] enable 
 */
void button_driver_enable_debug(bool enable);

/** Initialization check
 *
 * This API checks if button driver has been initialized.
 *
 * @return true if initialization is done.
 * @return false if initialization is not done.
 */
bool button_driver_is_init_done();

/** Initialize button driver
 *
 * Initialize the button driver
 *
 * @param[in] button_driver_config Driver Configuration
 *
 * @return ESP_OK on success.
 * @return error in case of failure.
 */
esp_err_t button_driver_init(button_driver_config_t *button_driver_config);

#endif /* _BUTTON_DRIVER_H_ */
