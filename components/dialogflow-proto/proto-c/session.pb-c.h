/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: google/cloud/dialogflow/v2beta1/session.proto */

#ifndef PROTOBUF_C_google_2fcloud_2fdialogflow_2fv2beta1_2fsession_2eproto__INCLUDED
#define PROTOBUF_C_google_2fcloud_2fdialogflow_2fv2beta1_2fsession_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "annotations.pb-c.h"
#include "audio_config.pb-c.h"
#include "context.pb-c.h"
#include "intent.pb-c.h"
#include "session_entity_type.pb-c.h"
#include "struct.pb-c.h"
#include "status.pb-c.h"
#include "latlng.pb-c.h"

typedef struct _Google__Cloud__Dialogflow__V2beta1__DetectIntentRequest Google__Cloud__Dialogflow__V2beta1__DetectIntentRequest;
typedef struct _Google__Cloud__Dialogflow__V2beta1__DetectIntentResponse Google__Cloud__Dialogflow__V2beta1__DetectIntentResponse;
typedef struct _Google__Cloud__Dialogflow__V2beta1__QueryParameters Google__Cloud__Dialogflow__V2beta1__QueryParameters;
typedef struct _Google__Cloud__Dialogflow__V2beta1__QueryInput Google__Cloud__Dialogflow__V2beta1__QueryInput;
typedef struct _Google__Cloud__Dialogflow__V2beta1__QueryResult Google__Cloud__Dialogflow__V2beta1__QueryResult;
typedef struct _Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers;
typedef struct _Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers__Answer Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers__Answer;
typedef struct _Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentRequest Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentRequest;
typedef struct _Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentResponse Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentResponse;
typedef struct _Google__Cloud__Dialogflow__V2beta1__StreamingRecognitionResult Google__Cloud__Dialogflow__V2beta1__StreamingRecognitionResult;
typedef struct _Google__Cloud__Dialogflow__V2beta1__InputAudioConfig Google__Cloud__Dialogflow__V2beta1__InputAudioConfig;
typedef struct _Google__Cloud__Dialogflow__V2beta1__TextInput Google__Cloud__Dialogflow__V2beta1__TextInput;
typedef struct _Google__Cloud__Dialogflow__V2beta1__EventInput Google__Cloud__Dialogflow__V2beta1__EventInput;
typedef struct _Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisRequestConfig Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisRequestConfig;
typedef struct _Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisResult Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisResult;
typedef struct _Google__Cloud__Dialogflow__V2beta1__Sentiment Google__Cloud__Dialogflow__V2beta1__Sentiment;


/* --- enums --- */

/*
 * Represents the system's confidence that this knowledge answer is a good
 * match for this conversational query.
 */
typedef enum _Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers__Answer__MatchConfidenceLevel {
  /*
   * Not specified.
   */
  GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__KNOWLEDGE_ANSWERS__ANSWER__MATCH_CONFIDENCE_LEVEL__MATCH_CONFIDENCE_LEVEL_UNSPECIFIED = 0,
  /*
   * Indicates that the confidence is low.
   */
  GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__KNOWLEDGE_ANSWERS__ANSWER__MATCH_CONFIDENCE_LEVEL__LOW = 1,
  /*
   * Indicates our confidence is medium.
   */
  GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__KNOWLEDGE_ANSWERS__ANSWER__MATCH_CONFIDENCE_LEVEL__MEDIUM = 2,
  /*
   * Indicates our confidence is high.
   */
  GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__KNOWLEDGE_ANSWERS__ANSWER__MATCH_CONFIDENCE_LEVEL__HIGH = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__KNOWLEDGE_ANSWERS__ANSWER__MATCH_CONFIDENCE_LEVEL)
} Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers__Answer__MatchConfidenceLevel;
/*
 * Type of the response message.
 */
typedef enum _Google__Cloud__Dialogflow__V2beta1__StreamingRecognitionResult__MessageType {
  /*
   * Not specified. Should never be used.
   */
  GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__STREAMING_RECOGNITION_RESULT__MESSAGE_TYPE__MESSAGE_TYPE_UNSPECIFIED = 0,
  /*
   * Message contains a (possibly partial) transcript.
   */
  GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__STREAMING_RECOGNITION_RESULT__MESSAGE_TYPE__TRANSCRIPT = 1,
  /*
   * Event indicates that the server has detected the end of the user's speech
   * utterance and expects no additional speech. Therefore, the server will
   * not process additional audio (although it may subsequently return
   * additional results). The client should stop sending additional audio
   * data, half-close the gRPC connection, and wait for any additional results
   * until the server closes the gRPC connection. This message is only sent if
   * `single_utterance` was set to `true`, and is not used otherwise.
   */
  GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__STREAMING_RECOGNITION_RESULT__MESSAGE_TYPE__END_OF_SINGLE_UTTERANCE = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__STREAMING_RECOGNITION_RESULT__MESSAGE_TYPE)
} Google__Cloud__Dialogflow__V2beta1__StreamingRecognitionResult__MessageType;
/*
 * Audio encoding of the audio content sent in the conversational query request.
 * Refer to the
 * [Cloud Speech API
 * documentation](https://cloud.google.com/speech-to-text/docs/basics) for more
 * details.
 */
typedef enum _Google__Cloud__Dialogflow__V2beta1__AudioEncoding {
  /*
   * Not specified.
   */
  GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__AUDIO_ENCODING__AUDIO_ENCODING_UNSPECIFIED = 0,
  /*
   * Uncompressed 16-bit signed little-endian samples (Linear PCM).
   */
  GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__AUDIO_ENCODING__AUDIO_ENCODING_LINEAR_16 = 1,
  /*
   * [`FLAC`](https://xiph.org/flac/documentation.html) (Free Lossless Audio
   * Codec) is the recommended encoding because it is lossless (therefore
   * recognition is not compromised) and requires only about half the
   * bandwidth of `LINEAR16`. `FLAC` stream encoding supports 16-bit and
   * 24-bit samples, however, not all fields in `STREAMINFO` are supported.
   */
  GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__AUDIO_ENCODING__AUDIO_ENCODING_FLAC = 2,
  /*
   * 8-bit samples that compand 14-bit audio samples using G.711 PCMU/mu-law.
   */
  GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__AUDIO_ENCODING__AUDIO_ENCODING_MULAW = 3,
  /*
   * Adaptive Multi-Rate Narrowband codec. `sample_rate_hertz` must be 8000.
   */
  GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__AUDIO_ENCODING__AUDIO_ENCODING_AMR = 4,
  /*
   * Adaptive Multi-Rate Wideband codec. `sample_rate_hertz` must be 16000.
   */
  GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__AUDIO_ENCODING__AUDIO_ENCODING_AMR_WB = 5,
  /*
   * Opus encoded audio frames in Ogg container
   * ([OggOpus](https://wiki.xiph.org/OggOpus)).
   * `sample_rate_hertz` must be 16000.
   */
  GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__AUDIO_ENCODING__AUDIO_ENCODING_OGG_OPUS = 6,
  /*
   * Although the use of lossy encodings is not recommended, if a very low
   * bitrate encoding is required, `OGG_OPUS` is highly preferred over
   * Speex encoding. The [Speex](https://speex.org/) encoding supported by
   * Dialogflow API has a header byte in each block, as in MIME type
   * `audio/x-speex-with-header-byte`.
   * It is a variant of the RTP Speex encoding defined in
   * [RFC 5574](https://tools.ietf.org/html/rfc5574).
   * The stream is a sequence of blocks, one block per RTP packet. Each block
   * starts with a byte containing the length of the block, in bytes, followed
   * by one or more frames of Speex data, padded to an integral number of
   * bytes (octets) as specified in RFC 5574. In other words, each RTP header
   * is replaced with a single byte containing the block length. Only Speex
   * wideband is supported. `sample_rate_hertz` must be 16000.
   */
  GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__AUDIO_ENCODING__AUDIO_ENCODING_SPEEX_WITH_HEADER_BYTE = 7
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__AUDIO_ENCODING)
} Google__Cloud__Dialogflow__V2beta1__AudioEncoding;

/* --- messages --- */

/*
 * The request to detect user's intent.
 */
struct  _Google__Cloud__Dialogflow__V2beta1__DetectIntentRequest
{
  ProtobufCMessage base;
  /*
   * Required. The name of the session this query is sent to. Format:
   * `projects/<Project ID>/agent/sessions/<Session ID>`, or
   * `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
   * ID>/sessions/<Session ID>`. If `Environment ID` is not specified, we assume
   * default 'draft' environment. If `User ID` is not specified, we are using
   * "-". It’s up to the API caller to choose an appropriate `Session ID` and
   * `User Id`. They can be a random numbers or some type of user and session
   * identifiers (preferably hashed). The length of the `Session ID` and
   * `User ID` must not exceed 36 characters.
   */
  char *session;
  /*
   * Optional. The parameters of this query.
   */
  Google__Cloud__Dialogflow__V2beta1__QueryParameters *query_params;
  /*
   * Required. The input specification. It can be set to:
   * 1.  an audio config
   *     which instructs the speech recognizer how to process the speech audio,
   * 2.  a conversational query in the form of text, or
   * 3.  an event that specifies which intent to trigger.
   */
  Google__Cloud__Dialogflow__V2beta1__QueryInput *query_input;
  /*
   * Optional. Instructs the speech synthesizer how to generate the output
   * audio. If this field is not set and agent-level speech synthesizer is not
   * configured, no output audio is generated.
   */
  Google__Cloud__Dialogflow__V2beta1__OutputAudioConfig *output_audio_config;
  /*
   * Optional. The natural language speech audio to be processed. This field
   * should be populated iff `query_input` is set to an input audio config.
   * A single request can contain up to 1 minute of speech audio data.
   */
  ProtobufCBinaryData input_audio;
};
#define GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__DETECT_INTENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__cloud__dialogflow__v2beta1__detect_intent_request__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, NULL, NULL, {0,NULL} }


/*
 * The message returned from the DetectIntent method.
 */
struct  _Google__Cloud__Dialogflow__V2beta1__DetectIntentResponse
{
  ProtobufCMessage base;
  /*
   * The unique identifier of the response. It can be used to
   * locate a response in the training example set or for reporting issues.
   */
  char *response_id;
  /*
   * The selected results of the conversational query or event processing.
   * See `alternative_query_results` for additional potential results.
   */
  Google__Cloud__Dialogflow__V2beta1__QueryResult *query_result;
  /*
   * If Knowledge Connectors are enabled, there could be more than one result
   * returned for a given query or event, and this field will contain all
   * results except for the top one, which is captured in query_result. The
   * alternative results are ordered by decreasing
   * `QueryResult.intent_detection_confidence`. If Knowledge Connectors are
   * disabled, this field will be empty until multiple responses for regular
   * intents are supported, at which point those additional results will be
   * surfaced here.
   */
  size_t n_alternative_query_results;
  Google__Cloud__Dialogflow__V2beta1__QueryResult **alternative_query_results;
  /*
   * Specifies the status of the webhook request. `webhook_status`
   * is never populated in webhook requests.
   */
  Google__Rpc__Status *webhook_status;
  /*
   * The audio data bytes encoded as specified in the request.
   */
  ProtobufCBinaryData output_audio;
  /*
   * Instructs the speech synthesizer how to generate the output audio. This
   * field is populated from the agent-level speech synthesizer configuration,
   * if enabled.
   */
  Google__Cloud__Dialogflow__V2beta1__OutputAudioConfig *output_audio_config;
};
#define GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__DETECT_INTENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__cloud__dialogflow__v2beta1__detect_intent_response__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, 0,NULL, NULL, {0,NULL}, NULL }


/*
 * Represents the parameters of the conversational query.
 */
struct  _Google__Cloud__Dialogflow__V2beta1__QueryParameters
{
  ProtobufCMessage base;
  /*
   * Optional. The time zone of this conversational query from the
   * [time zone database](https://www.iana.org/time-zones), e.g.,
   * America/New_York, Europe/Paris. If not provided, the time zone specified in
   * agent settings is used.
   */
  char *time_zone;
  /*
   * Optional. The geo location of this conversational query.
   */
  Google__Type__LatLng *geo_location;
  /*
   * Optional. The collection of contexts to be activated before this query is
   * executed.
   */
  size_t n_contexts;
  Google__Cloud__Dialogflow__V2beta1__Context **contexts;
  /*
   * Optional. Specifies whether to delete all contexts in the current session
   * before the new ones are activated.
   */
  protobuf_c_boolean reset_contexts;
  /*
   * Optional. The collection of session entity types to replace or extend
   * developer entities with for this query only. The entity synonyms apply
   * to all languages.
   */
  size_t n_session_entity_types;
  Google__Cloud__Dialogflow__V2beta1__SessionEntityType **session_entity_types;
  /*
   * Optional. This field can be used to pass custom data into the webhook
   * associated with the agent. Arbitrary JSON objects are supported.
   */
  Google__Protobuf__Struct *payload;
  /*
   * Optional. KnowledgeBases to get alternative results from. If not set, the
   * KnowledgeBases enabled in the agent (through UI) will be used.
   * Format:  `projects/<Project ID>/knowledgeBases/<Knowledge Base ID>`.
   * Note: This field is `repeated` for forward compatibility, currently only
   * the first one is supported, we may return an error if multiple
   * KnowledgeBases are specified.
   */
  size_t n_knowledge_base_names;
  char **knowledge_base_names;
  /*
   * Optional. Configures the type of sentiment analysis to perform. If not
   * provided, sentiment analysis is not performed.
   * Note: Sentiment Analysis is only currently available for Enterprise Edition
   * agents.
   */
  Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisRequestConfig *sentiment_analysis_request_config;
};
#define GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__QUERY_PARAMETERS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__cloud__dialogflow__v2beta1__query_parameters__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, 0,NULL, 0, 0,NULL, NULL, 0,NULL, NULL }


typedef enum {
  GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__QUERY_INPUT__INPUT__NOT_SET = 0,
  GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__QUERY_INPUT__INPUT_AUDIO_CONFIG = 1,
  GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__QUERY_INPUT__INPUT_TEXT = 2,
  GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__QUERY_INPUT__INPUT_EVENT = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__QUERY_INPUT__INPUT)
} Google__Cloud__Dialogflow__V2beta1__QueryInput__InputCase;

/*
 * Represents the query input. It can contain either:
 * 1.  An audio config which
 *     instructs the speech recognizer how to process the speech audio.
 * 2.  A conversational query in the form of text,.
 * 3.  An event that specifies which intent to trigger.
 */
struct  _Google__Cloud__Dialogflow__V2beta1__QueryInput
{
  ProtobufCMessage base;
  Google__Cloud__Dialogflow__V2beta1__QueryInput__InputCase input_case;
  union {
    /*
     * Instructs the speech recognizer how to process the speech audio.
     */
    Google__Cloud__Dialogflow__V2beta1__InputAudioConfig *audio_config;
    /*
     * The natural language text to be processed.
     */
    Google__Cloud__Dialogflow__V2beta1__TextInput *text;
    /*
     * The event to be processed.
     */
    Google__Cloud__Dialogflow__V2beta1__EventInput *event;
  };
};
#define GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__QUERY_INPUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__cloud__dialogflow__v2beta1__query_input__descriptor) \
    , GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__QUERY_INPUT__INPUT__NOT_SET, {0} }


/*
 * Represents the result of conversational query or event processing.
 */
struct  _Google__Cloud__Dialogflow__V2beta1__QueryResult
{
  ProtobufCMessage base;
  /*
   * The original conversational query text:
   * - If natural language text was provided as input, `query_text` contains
   *   a copy of the input.
   * - If natural language speech audio was provided as input, `query_text`
   *   contains the speech recognition result. If speech recognizer produced
   *   multiple alternatives, a particular one is picked.
   * - If an event was provided as input, `query_text` is not set.
   */
  char *query_text;
  /*
   * The language that was triggered during intent detection.
   * See [Language Support](https://dialogflow.com/docs/reference/language)
   * for a list of the currently supported language codes.
   */
  char *language_code;
  /*
   * The Speech recognition confidence between 0.0 and 1.0. A higher number
   * indicates an estimated greater likelihood that the recognized words are
   * correct. The default of 0.0 is a sentinel value indicating that confidence
   * was not set.
   * This field is not guaranteed to be accurate or set. In particular this
   * field isn't set for StreamingDetectIntent since the streaming endpoint has
   * separate confidence estimates per portion of the audio in
   * StreamingRecognitionResult.
   */
  float speech_recognition_confidence;
  /*
   * The action name from the matched intent.
   */
  char *action;
  /*
   * The collection of extracted parameters.
   */
  Google__Protobuf__Struct *parameters;
  /*
   * This field is set to:
   * - `false` if the matched intent has required parameters and not all of
   *    the required parameter values have been collected.
   * - `true` if all required parameter values have been collected, or if the
   *    matched intent doesn't contain any required parameters.
   */
  protobuf_c_boolean all_required_params_present;
  /*
   * The text to be pronounced to the user or shown on the screen.
   */
  char *fulfillment_text;
  /*
   * The collection of rich messages to present to the user.
   */
  size_t n_fulfillment_messages;
  Google__Cloud__Dialogflow__V2beta1__Intent__Message **fulfillment_messages;
  /*
   * If the query was fulfilled by a webhook call, this field is set to the
   * value of the `source` field returned in the webhook response.
   */
  char *webhook_source;
  /*
   * If the query was fulfilled by a webhook call, this field is set to the
   * value of the `payload` field returned in the webhook response.
   */
  Google__Protobuf__Struct *webhook_payload;
  /*
   * The collection of output contexts. If applicable,
   * `output_contexts.parameters` contains entries with name
   * `<parameter name>.original` containing the original parameter values
   * before the query.
   */
  size_t n_output_contexts;
  Google__Cloud__Dialogflow__V2beta1__Context **output_contexts;
  /*
   * The intent that matched the conversational query. Some, not
   * all fields are filled in this message, including but not limited to:
   * `name`, `display_name` and `webhook_state`.
   */
  Google__Cloud__Dialogflow__V2beta1__Intent *intent;
  /*
   * The intent detection confidence. Values range from 0.0
   * (completely uncertain) to 1.0 (completely certain).
   * If there are `multiple knowledge_answers` messages, this value is set to
   * the greatest `knowledgeAnswers.match_confidence` value in the list.
   */
  float intent_detection_confidence;
  /*
   * The free-form diagnostic info. For example, this field
   * could contain webhook call latency.
   */
  Google__Protobuf__Struct *diagnostic_info;
  /*
   * The sentiment analysis result, which depends on the
   * `sentiment_analysis_request_config` specified in the request.
   */
  Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisResult *sentiment_analysis_result;
  /*
   * The result from Knowledge Connector (if any), ordered by decreasing
   * `KnowledgeAnswers.match_confidence`.
   */
  Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers *knowledge_answers;
};
#define GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__QUERY_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__cloud__dialogflow__v2beta1__query_result__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, 0, (char *)protobuf_c_empty_string, NULL, 0, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string, NULL, 0,NULL, NULL, 0, NULL, NULL, NULL }


/*
 * An answer from Knowledge Connector.
 */
struct  _Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers__Answer
{
  ProtobufCMessage base;
  /*
   * Indicates which Knowledge Document this answer was extracted from.
   * Format: `projects/<Project ID>/knowledgeBases/<Knowledge Base
   * ID>/documents/<Document ID>`.
   */
  char *source;
  /*
   * The corresponding FAQ question if the answer was extracted from a FAQ
   * Document, empty otherwise.
   */
  char *faq_question;
  /*
   * The piece of text from the `source` knowledge base document that answers
   * this conversational query.
   */
  char *answer;
  /*
   * The system's confidence level that this knowledge answer is a good match
   * for this conversational query.
   * NOTE: The confidence level for a given `<query, answer>` pair may change
   * without notice, as it depends on models that are constantly being
   * improved. However, it will change less frequently than the confidence
   * score below, and should be preferred for referencing the quality of an
   * answer.
   */
  Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers__Answer__MatchConfidenceLevel match_confidence_level;
  /*
   * The system's confidence score that this Knowledge answer is a good match
   * for this converstational query, range from 0.0 (completely uncertain)
   * to 1.0 (completely certain).
   * Note: The confidence score is likely to vary somewhat (possibly even for
   * identical requests), as the underlying model is under constant
   * improvement, we may deprecate it in the future. We recommend using
   * `match_confidence_level` which should be generally more stable.
   */
  float match_confidence;
};
#define GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__KNOWLEDGE_ANSWERS__ANSWER__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__cloud__dialogflow__v2beta1__knowledge_answers__answer__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__KNOWLEDGE_ANSWERS__ANSWER__MATCH_CONFIDENCE_LEVEL__MATCH_CONFIDENCE_LEVEL_UNSPECIFIED, 0 }


/*
 * Represents the result of querying a Knowledge base.
 */
struct  _Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers
{
  ProtobufCMessage base;
  /*
   * A list of answers from Knowledge Connector.
   */
  size_t n_answers;
  Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers__Answer **answers;
};
#define GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__KNOWLEDGE_ANSWERS__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__cloud__dialogflow__v2beta1__knowledge_answers__descriptor) \
    , 0,NULL }


/*
 * The top-level message sent by the client to the
 * `StreamingDetectIntent` method.
 * Multiple request messages should be sent in order:
 * 1.  The first message must contain `session`, `query_input` plus optionally
 *     `query_params` and/or `single_utterance`. If the client wants to receive
 *     an audio response, it should also contain `output_audio_config`.
 *     The message must not contain `input_audio`.
 * 2.  If `query_input` was set to a streaming input audio config,
 *     all subsequent messages must contain only `input_audio`.
 *     Otherwise, finish the request stream.
 */
struct  _Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentRequest
{
  ProtobufCMessage base;
  /*
   * Required. The name of the session the query is sent to.
   * Format of the session name:
   * `projects/<Project ID>/agent/sessions/<Session ID>`, or
   * `projects/<Project ID>/agent/environments/<Environment ID>/users/<User
   * ID>/sessions/<Session ID>`. If `Environment ID` is not specified, we assume
   * default 'draft' environment. If `User ID` is not specified, we are using
   * "-". It’s up to the API caller to choose an appropriate `Session ID` and
   * `User Id`. They can be a random numbers or some type of user and session
   * identifiers (preferably hashed). The length of the `Session ID` and
   * `User ID` must not exceed 36 characters.
   */
  char *session;
  /*
   * Optional. The parameters of this query.
   */
  Google__Cloud__Dialogflow__V2beta1__QueryParameters *query_params;
  /*
   * Required. The input specification. It can be set to:
   * 1.  an audio config which instructs the speech recognizer how to process
   *     the speech audio,
   * 2.  a conversational query in the form of text, or
   * 3.  an event that specifies which intent to trigger.
   */
  Google__Cloud__Dialogflow__V2beta1__QueryInput *query_input;
  /*
   * Optional. If `false` (default), recognition does not cease until the
   * client closes the stream.
   * If `true`, the recognizer will detect a single spoken utterance in input
   * audio. Recognition ceases when it detects the audio's voice has
   * stopped or paused. In this case, once a detected intent is received, the
   * client should close the stream and start a new request with a new stream as
   * needed.
   * This setting is ignored when `query_input` is a piece of text or an event.
   */
  protobuf_c_boolean single_utterance;
  /*
   * Optional. Instructs the speech synthesizer how to generate the output
   * audio. If this field is not set and agent-level speech synthesizer is not
   * configured, no output audio is generated.
   */
  Google__Cloud__Dialogflow__V2beta1__OutputAudioConfig *output_audio_config;
  /*
   * Optional. The input audio content to be recognized. Must be sent if
   * `query_input` was set to a streaming input audio config. The complete audio
   * over all streaming messages must not exceed 1 minute.
   */
  ProtobufCBinaryData input_audio;
};
#define GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__STREAMING_DETECT_INTENT_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__cloud__dialogflow__v2beta1__streaming_detect_intent_request__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, NULL, 0, NULL, {0,NULL} }


/*
 * The top-level message returned from the
 * `StreamingDetectIntent` method.
 * Multiple response messages can be returned in order:
 * 1.  If the input was set to streaming audio, the first one or more messages
 *     contain `recognition_result`. Each `recognition_result` represents a more
 *     complete transcript of what the user said. The last `recognition_result`
 *     has `is_final` set to `true`.
 * 2.  The next message contains `response_id`, `query_result`,
 *     `alternative_query_results` and optionally `webhook_status` if a WebHook
 *     was called.
 * 3.  If `output_audio_config` was specified in the request or agent-level
 *     speech synthesizer is configured, all subsequent messages contain
 *     `output_audio` and `output_audio_config`.
 */
struct  _Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentResponse
{
  ProtobufCMessage base;
  /*
   * The unique identifier of the response. It can be used to
   * locate a response in the training example set or for reporting issues.
   */
  char *response_id;
  /*
   * The result of speech recognition.
   */
  Google__Cloud__Dialogflow__V2beta1__StreamingRecognitionResult *recognition_result;
  /*
   * The selected results of the conversational query or event processing.
   * See `alternative_query_results` for additional potential results.
   */
  Google__Cloud__Dialogflow__V2beta1__QueryResult *query_result;
  /*
   * If Knowledge Connectors are enabled, there could be more than one result
   * returned for a given query or event, and this field will contain all
   * results except for the top one, which is captured in query_result. The
   * alternative results are ordered by decreasing
   * `QueryResult.intent_detection_confidence`. If Knowledge Connectors are
   * disabled, this field will be empty until multiple responses for regular
   * intents are supported, at which point those additional results will be
   * surfaced here.
   */
  size_t n_alternative_query_results;
  Google__Cloud__Dialogflow__V2beta1__QueryResult **alternative_query_results;
  /*
   * Specifies the status of the webhook request.
   */
  Google__Rpc__Status *webhook_status;
  /*
   * The audio data bytes encoded as specified in the request.
   */
  ProtobufCBinaryData output_audio;
  /*
   * Instructs the speech synthesizer how to generate the output audio. This
   * field is populated from the agent-level speech synthesizer configuration,
   * if enabled.
   */
  Google__Cloud__Dialogflow__V2beta1__OutputAudioConfig *output_audio_config;
};
#define GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__STREAMING_DETECT_INTENT_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__cloud__dialogflow__v2beta1__streaming_detect_intent_response__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, NULL, 0,NULL, NULL, {0,NULL}, NULL }


/*
 * Contains a speech recognition result corresponding to a portion of the audio
 * that is currently being processed or an indication that this is the end
 * of the single requested utterance.
 * Example:
 * 1.  transcript: "tube"
 * 2.  transcript: "to be a"
 * 3.  transcript: "to be"
 * 4.  transcript: "to be or not to be"
 *     is_final: true
 * 5.  transcript: " that's"
 * 6.  transcript: " that is"
 * 7.  recognition_event_type: `RECOGNITION_EVENT_END_OF_SINGLE_UTTERANCE`
 * 8.  transcript: " that is the question"
 *     is_final: true
 * Only two of the responses contain final results (#4 and #8 indicated by
 * `is_final: true`). Concatenating these generates the full transcript: "to be
 * or not to be that is the question".
 * In each response we populate:
 * *  for `MESSAGE_TYPE_TRANSCRIPT`: `transcript` and possibly `is_final`.
 * *  for `MESSAGE_TYPE_END_OF_SINGLE_UTTERANCE`: only `event_type`.
 */
struct  _Google__Cloud__Dialogflow__V2beta1__StreamingRecognitionResult
{
  ProtobufCMessage base;
  /*
   * Type of the result message.
   */
  Google__Cloud__Dialogflow__V2beta1__StreamingRecognitionResult__MessageType message_type;
  /*
   * Transcript text representing the words that the user spoke.
   * Populated if and only if `event_type` = `RECOGNITION_EVENT_TRANSCRIPT`.
   */
  char *transcript;
  /*
   * The default of 0.0 is a sentinel value indicating `confidence` was not set.
   * If `false`, the `StreamingRecognitionResult` represents an
   * interim result that may change. If `true`, the recognizer will not return
   * any further hypotheses about this piece of the audio. May only be populated
   * for `event_type` = `RECOGNITION_EVENT_TRANSCRIPT`.
   */
  protobuf_c_boolean is_final;
  /*
   * The Speech confidence between 0.0 and 1.0 for the current portion of audio.
   * A higher number indicates an estimated greater likelihood that the
   * recognized words are correct. The default of 0.0 is a sentinel value
   * indicating that confidence was not set.
   * This field is typically only provided if `is_final` is true and you should
   * not rely on it being accurate or even set.
   */
  float confidence;
};
#define GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__STREAMING_RECOGNITION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__cloud__dialogflow__v2beta1__streaming_recognition_result__descriptor) \
    , GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__STREAMING_RECOGNITION_RESULT__MESSAGE_TYPE__MESSAGE_TYPE_UNSPECIFIED, (char *)protobuf_c_empty_string, 0, 0 }


/*
 * Instructs the speech recognizer how to process the audio content.
 */
struct  _Google__Cloud__Dialogflow__V2beta1__InputAudioConfig
{
  ProtobufCMessage base;
  /*
   * Required. Audio encoding of the audio content to process.
   */
  Google__Cloud__Dialogflow__V2beta1__AudioEncoding audio_encoding;
  /*
   * Required. Sample rate (in Hertz) of the audio content sent in the query.
   * Refer to
   * [Cloud Speech API
   * documentation](https://cloud.google.com/speech-to-text/docs/basics) for
   * more details.
   */
  int32_t sample_rate_hertz;
  /*
   * Required. The language of the supplied audio. Dialogflow does not do
   * translations. See [Language
   * Support](https://dialogflow.com/docs/languages) for a list of the
   * currently supported language codes. Note that queries in the same session
   * do not necessarily need to specify the same language.
   */
  char *language_code;
  /*
   * Optional. The collection of phrase hints which are used to boost accuracy
   * of speech recognition.
   * Refer to
   * [Cloud Speech API
   * documentation](https://cloud.google.com/speech-to-text/docs/basics#phrase-hints)
   * for more details.
   */
  size_t n_phrase_hints;
  char **phrase_hints;
  /*
   * Optional. Which Speech model to select for the given request. Select the
   * model best suited to your domain to get best results. If a model is not
   * explicitly specified, then we auto-select a model based on the parameters
   * in the InputAudioConfig.
   * If enhanced speech model is enabled for the agent and an enhanced
   * version of the specified model for the language does not exist, then the
   * speech is recognized using the standard version of the specified model.
   * Refer to
   * [Cloud Speech API
   * documentation](https://cloud.google.com/speech-to-text/docs/basics#select-model)
   * for more details.
   */
  char *model;
};
#define GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__INPUT_AUDIO_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__cloud__dialogflow__v2beta1__input_audio_config__descriptor) \
    , GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__AUDIO_ENCODING__AUDIO_ENCODING_UNSPECIFIED, 0, (char *)protobuf_c_empty_string, 0,NULL, (char *)protobuf_c_empty_string }


/*
 * Represents the natural language text to be processed.
 */
struct  _Google__Cloud__Dialogflow__V2beta1__TextInput
{
  ProtobufCMessage base;
  /*
   * Required. The UTF-8 encoded natural language text to be processed.
   * Text length must not exceed 256 bytes.
   */
  char *text;
  /*
   * Required. The language of this conversational query. See [Language
   * Support](https://dialogflow.com/docs/languages) for a list of the
   * currently supported language codes. Note that queries in the same session
   * do not necessarily need to specify the same language.
   */
  char *language_code;
};
#define GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__TEXT_INPUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__cloud__dialogflow__v2beta1__text_input__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Events allow for matching intents by event name instead of the natural
 * language input. For instance, input `<event: { name: “welcome_event”,
 * parameters: { name: “Sam” } }>` can trigger a personalized welcome response.
 * The parameter `name` may be used by the agent in the response:
 * `“Hello #welcome_event.name! What can I do for you today?”`.
 */
struct  _Google__Cloud__Dialogflow__V2beta1__EventInput
{
  ProtobufCMessage base;
  /*
   * Required. The unique identifier of the event.
   */
  char *name;
  /*
   * Optional. The collection of parameters associated with the event.
   */
  Google__Protobuf__Struct *parameters;
  /*
   * Required. The language of this query. See [Language
   * Support](https://dialogflow.com/docs/languages) for a list of the
   * currently supported language codes. Note that queries in the same session
   * do not necessarily need to specify the same language.
   */
  char *language_code;
};
#define GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__EVENT_INPUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__cloud__dialogflow__v2beta1__event_input__descriptor) \
    , (char *)protobuf_c_empty_string, NULL, (char *)protobuf_c_empty_string }


/*
 * Configures the types of sentiment analysis to perform.
 */
struct  _Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisRequestConfig
{
  ProtobufCMessage base;
  /*
   * Optional. Instructs the service to perform sentiment analysis on
   * `query_text`. If not provided, sentiment analysis is not performed on
   * `query_text`.
   */
  protobuf_c_boolean analyze_query_text_sentiment;
};
#define GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__SENTIMENT_ANALYSIS_REQUEST_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__cloud__dialogflow__v2beta1__sentiment_analysis_request_config__descriptor) \
    , 0 }


/*
 * The result of sentiment analysis as configured by
 * `sentiment_analysis_request_config`.
 */
struct  _Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisResult
{
  ProtobufCMessage base;
  /*
   * The sentiment analysis result for `query_text`.
   */
  Google__Cloud__Dialogflow__V2beta1__Sentiment *query_text_sentiment;
};
#define GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__SENTIMENT_ANALYSIS_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__cloud__dialogflow__v2beta1__sentiment_analysis_result__descriptor) \
    , NULL }


/*
 * The sentiment, such as positive/negative feeling or association, for a unit
 * of analysis, such as the query text.
 */
struct  _Google__Cloud__Dialogflow__V2beta1__Sentiment
{
  ProtobufCMessage base;
  /*
   * Sentiment score between -1.0 (negative sentiment) and 1.0 (positive
   * sentiment).
   */
  float score;
  /*
   * A non-negative number in the [0, +inf) range, which represents the absolute
   * magnitude of sentiment, regardless of score (positive or negative).
   */
  float magnitude;
};
#define GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__SENTIMENT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__cloud__dialogflow__v2beta1__sentiment__descriptor) \
    , 0, 0 }


/* Google__Cloud__Dialogflow__V2beta1__DetectIntentRequest methods */
void   google__cloud__dialogflow__v2beta1__detect_intent_request__init
                     (Google__Cloud__Dialogflow__V2beta1__DetectIntentRequest         *message);
size_t google__cloud__dialogflow__v2beta1__detect_intent_request__get_packed_size
                     (const Google__Cloud__Dialogflow__V2beta1__DetectIntentRequest   *message);
size_t google__cloud__dialogflow__v2beta1__detect_intent_request__pack
                     (const Google__Cloud__Dialogflow__V2beta1__DetectIntentRequest   *message,
                      uint8_t             *out);
size_t google__cloud__dialogflow__v2beta1__detect_intent_request__pack_to_buffer
                     (const Google__Cloud__Dialogflow__V2beta1__DetectIntentRequest   *message,
                      ProtobufCBuffer     *buffer);
Google__Cloud__Dialogflow__V2beta1__DetectIntentRequest *
       google__cloud__dialogflow__v2beta1__detect_intent_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__cloud__dialogflow__v2beta1__detect_intent_request__free_unpacked
                     (Google__Cloud__Dialogflow__V2beta1__DetectIntentRequest *message,
                      ProtobufCAllocator *allocator);
/* Google__Cloud__Dialogflow__V2beta1__DetectIntentResponse methods */
void   google__cloud__dialogflow__v2beta1__detect_intent_response__init
                     (Google__Cloud__Dialogflow__V2beta1__DetectIntentResponse         *message);
size_t google__cloud__dialogflow__v2beta1__detect_intent_response__get_packed_size
                     (const Google__Cloud__Dialogflow__V2beta1__DetectIntentResponse   *message);
size_t google__cloud__dialogflow__v2beta1__detect_intent_response__pack
                     (const Google__Cloud__Dialogflow__V2beta1__DetectIntentResponse   *message,
                      uint8_t             *out);
size_t google__cloud__dialogflow__v2beta1__detect_intent_response__pack_to_buffer
                     (const Google__Cloud__Dialogflow__V2beta1__DetectIntentResponse   *message,
                      ProtobufCBuffer     *buffer);
Google__Cloud__Dialogflow__V2beta1__DetectIntentResponse *
       google__cloud__dialogflow__v2beta1__detect_intent_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__cloud__dialogflow__v2beta1__detect_intent_response__free_unpacked
                     (Google__Cloud__Dialogflow__V2beta1__DetectIntentResponse *message,
                      ProtobufCAllocator *allocator);
/* Google__Cloud__Dialogflow__V2beta1__QueryParameters methods */
void   google__cloud__dialogflow__v2beta1__query_parameters__init
                     (Google__Cloud__Dialogflow__V2beta1__QueryParameters         *message);
size_t google__cloud__dialogflow__v2beta1__query_parameters__get_packed_size
                     (const Google__Cloud__Dialogflow__V2beta1__QueryParameters   *message);
size_t google__cloud__dialogflow__v2beta1__query_parameters__pack
                     (const Google__Cloud__Dialogflow__V2beta1__QueryParameters   *message,
                      uint8_t             *out);
size_t google__cloud__dialogflow__v2beta1__query_parameters__pack_to_buffer
                     (const Google__Cloud__Dialogflow__V2beta1__QueryParameters   *message,
                      ProtobufCBuffer     *buffer);
Google__Cloud__Dialogflow__V2beta1__QueryParameters *
       google__cloud__dialogflow__v2beta1__query_parameters__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__cloud__dialogflow__v2beta1__query_parameters__free_unpacked
                     (Google__Cloud__Dialogflow__V2beta1__QueryParameters *message,
                      ProtobufCAllocator *allocator);
/* Google__Cloud__Dialogflow__V2beta1__QueryInput methods */
void   google__cloud__dialogflow__v2beta1__query_input__init
                     (Google__Cloud__Dialogflow__V2beta1__QueryInput         *message);
size_t google__cloud__dialogflow__v2beta1__query_input__get_packed_size
                     (const Google__Cloud__Dialogflow__V2beta1__QueryInput   *message);
size_t google__cloud__dialogflow__v2beta1__query_input__pack
                     (const Google__Cloud__Dialogflow__V2beta1__QueryInput   *message,
                      uint8_t             *out);
size_t google__cloud__dialogflow__v2beta1__query_input__pack_to_buffer
                     (const Google__Cloud__Dialogflow__V2beta1__QueryInput   *message,
                      ProtobufCBuffer     *buffer);
Google__Cloud__Dialogflow__V2beta1__QueryInput *
       google__cloud__dialogflow__v2beta1__query_input__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__cloud__dialogflow__v2beta1__query_input__free_unpacked
                     (Google__Cloud__Dialogflow__V2beta1__QueryInput *message,
                      ProtobufCAllocator *allocator);
/* Google__Cloud__Dialogflow__V2beta1__QueryResult methods */
void   google__cloud__dialogflow__v2beta1__query_result__init
                     (Google__Cloud__Dialogflow__V2beta1__QueryResult         *message);
size_t google__cloud__dialogflow__v2beta1__query_result__get_packed_size
                     (const Google__Cloud__Dialogflow__V2beta1__QueryResult   *message);
size_t google__cloud__dialogflow__v2beta1__query_result__pack
                     (const Google__Cloud__Dialogflow__V2beta1__QueryResult   *message,
                      uint8_t             *out);
size_t google__cloud__dialogflow__v2beta1__query_result__pack_to_buffer
                     (const Google__Cloud__Dialogflow__V2beta1__QueryResult   *message,
                      ProtobufCBuffer     *buffer);
Google__Cloud__Dialogflow__V2beta1__QueryResult *
       google__cloud__dialogflow__v2beta1__query_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__cloud__dialogflow__v2beta1__query_result__free_unpacked
                     (Google__Cloud__Dialogflow__V2beta1__QueryResult *message,
                      ProtobufCAllocator *allocator);
/* Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers__Answer methods */
void   google__cloud__dialogflow__v2beta1__knowledge_answers__answer__init
                     (Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers__Answer         *message);
/* Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers methods */
void   google__cloud__dialogflow__v2beta1__knowledge_answers__init
                     (Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers         *message);
size_t google__cloud__dialogflow__v2beta1__knowledge_answers__get_packed_size
                     (const Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers   *message);
size_t google__cloud__dialogflow__v2beta1__knowledge_answers__pack
                     (const Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers   *message,
                      uint8_t             *out);
size_t google__cloud__dialogflow__v2beta1__knowledge_answers__pack_to_buffer
                     (const Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers   *message,
                      ProtobufCBuffer     *buffer);
Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers *
       google__cloud__dialogflow__v2beta1__knowledge_answers__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__cloud__dialogflow__v2beta1__knowledge_answers__free_unpacked
                     (Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers *message,
                      ProtobufCAllocator *allocator);
/* Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentRequest methods */
void   google__cloud__dialogflow__v2beta1__streaming_detect_intent_request__init
                     (Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentRequest         *message);
size_t google__cloud__dialogflow__v2beta1__streaming_detect_intent_request__get_packed_size
                     (const Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentRequest   *message);
size_t google__cloud__dialogflow__v2beta1__streaming_detect_intent_request__pack
                     (const Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentRequest   *message,
                      uint8_t             *out);
size_t google__cloud__dialogflow__v2beta1__streaming_detect_intent_request__pack_to_buffer
                     (const Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentRequest   *message,
                      ProtobufCBuffer     *buffer);
Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentRequest *
       google__cloud__dialogflow__v2beta1__streaming_detect_intent_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__cloud__dialogflow__v2beta1__streaming_detect_intent_request__free_unpacked
                     (Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentRequest *message,
                      ProtobufCAllocator *allocator);
/* Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentResponse methods */
void   google__cloud__dialogflow__v2beta1__streaming_detect_intent_response__init
                     (Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentResponse         *message);
size_t google__cloud__dialogflow__v2beta1__streaming_detect_intent_response__get_packed_size
                     (const Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentResponse   *message);
size_t google__cloud__dialogflow__v2beta1__streaming_detect_intent_response__pack
                     (const Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentResponse   *message,
                      uint8_t             *out);
size_t google__cloud__dialogflow__v2beta1__streaming_detect_intent_response__pack_to_buffer
                     (const Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentResponse   *message,
                      ProtobufCBuffer     *buffer);
Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentResponse *
       google__cloud__dialogflow__v2beta1__streaming_detect_intent_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__cloud__dialogflow__v2beta1__streaming_detect_intent_response__free_unpacked
                     (Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentResponse *message,
                      ProtobufCAllocator *allocator);
/* Google__Cloud__Dialogflow__V2beta1__StreamingRecognitionResult methods */
void   google__cloud__dialogflow__v2beta1__streaming_recognition_result__init
                     (Google__Cloud__Dialogflow__V2beta1__StreamingRecognitionResult         *message);
size_t google__cloud__dialogflow__v2beta1__streaming_recognition_result__get_packed_size
                     (const Google__Cloud__Dialogflow__V2beta1__StreamingRecognitionResult   *message);
size_t google__cloud__dialogflow__v2beta1__streaming_recognition_result__pack
                     (const Google__Cloud__Dialogflow__V2beta1__StreamingRecognitionResult   *message,
                      uint8_t             *out);
size_t google__cloud__dialogflow__v2beta1__streaming_recognition_result__pack_to_buffer
                     (const Google__Cloud__Dialogflow__V2beta1__StreamingRecognitionResult   *message,
                      ProtobufCBuffer     *buffer);
Google__Cloud__Dialogflow__V2beta1__StreamingRecognitionResult *
       google__cloud__dialogflow__v2beta1__streaming_recognition_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__cloud__dialogflow__v2beta1__streaming_recognition_result__free_unpacked
                     (Google__Cloud__Dialogflow__V2beta1__StreamingRecognitionResult *message,
                      ProtobufCAllocator *allocator);
/* Google__Cloud__Dialogflow__V2beta1__InputAudioConfig methods */
void   google__cloud__dialogflow__v2beta1__input_audio_config__init
                     (Google__Cloud__Dialogflow__V2beta1__InputAudioConfig         *message);
size_t google__cloud__dialogflow__v2beta1__input_audio_config__get_packed_size
                     (const Google__Cloud__Dialogflow__V2beta1__InputAudioConfig   *message);
size_t google__cloud__dialogflow__v2beta1__input_audio_config__pack
                     (const Google__Cloud__Dialogflow__V2beta1__InputAudioConfig   *message,
                      uint8_t             *out);
size_t google__cloud__dialogflow__v2beta1__input_audio_config__pack_to_buffer
                     (const Google__Cloud__Dialogflow__V2beta1__InputAudioConfig   *message,
                      ProtobufCBuffer     *buffer);
Google__Cloud__Dialogflow__V2beta1__InputAudioConfig *
       google__cloud__dialogflow__v2beta1__input_audio_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__cloud__dialogflow__v2beta1__input_audio_config__free_unpacked
                     (Google__Cloud__Dialogflow__V2beta1__InputAudioConfig *message,
                      ProtobufCAllocator *allocator);
/* Google__Cloud__Dialogflow__V2beta1__TextInput methods */
void   google__cloud__dialogflow__v2beta1__text_input__init
                     (Google__Cloud__Dialogflow__V2beta1__TextInput         *message);
size_t google__cloud__dialogflow__v2beta1__text_input__get_packed_size
                     (const Google__Cloud__Dialogflow__V2beta1__TextInput   *message);
size_t google__cloud__dialogflow__v2beta1__text_input__pack
                     (const Google__Cloud__Dialogflow__V2beta1__TextInput   *message,
                      uint8_t             *out);
size_t google__cloud__dialogflow__v2beta1__text_input__pack_to_buffer
                     (const Google__Cloud__Dialogflow__V2beta1__TextInput   *message,
                      ProtobufCBuffer     *buffer);
Google__Cloud__Dialogflow__V2beta1__TextInput *
       google__cloud__dialogflow__v2beta1__text_input__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__cloud__dialogflow__v2beta1__text_input__free_unpacked
                     (Google__Cloud__Dialogflow__V2beta1__TextInput *message,
                      ProtobufCAllocator *allocator);
/* Google__Cloud__Dialogflow__V2beta1__EventInput methods */
void   google__cloud__dialogflow__v2beta1__event_input__init
                     (Google__Cloud__Dialogflow__V2beta1__EventInput         *message);
size_t google__cloud__dialogflow__v2beta1__event_input__get_packed_size
                     (const Google__Cloud__Dialogflow__V2beta1__EventInput   *message);
size_t google__cloud__dialogflow__v2beta1__event_input__pack
                     (const Google__Cloud__Dialogflow__V2beta1__EventInput   *message,
                      uint8_t             *out);
size_t google__cloud__dialogflow__v2beta1__event_input__pack_to_buffer
                     (const Google__Cloud__Dialogflow__V2beta1__EventInput   *message,
                      ProtobufCBuffer     *buffer);
Google__Cloud__Dialogflow__V2beta1__EventInput *
       google__cloud__dialogflow__v2beta1__event_input__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__cloud__dialogflow__v2beta1__event_input__free_unpacked
                     (Google__Cloud__Dialogflow__V2beta1__EventInput *message,
                      ProtobufCAllocator *allocator);
/* Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisRequestConfig methods */
void   google__cloud__dialogflow__v2beta1__sentiment_analysis_request_config__init
                     (Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisRequestConfig         *message);
size_t google__cloud__dialogflow__v2beta1__sentiment_analysis_request_config__get_packed_size
                     (const Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisRequestConfig   *message);
size_t google__cloud__dialogflow__v2beta1__sentiment_analysis_request_config__pack
                     (const Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisRequestConfig   *message,
                      uint8_t             *out);
size_t google__cloud__dialogflow__v2beta1__sentiment_analysis_request_config__pack_to_buffer
                     (const Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisRequestConfig   *message,
                      ProtobufCBuffer     *buffer);
Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisRequestConfig *
       google__cloud__dialogflow__v2beta1__sentiment_analysis_request_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__cloud__dialogflow__v2beta1__sentiment_analysis_request_config__free_unpacked
                     (Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisRequestConfig *message,
                      ProtobufCAllocator *allocator);
/* Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisResult methods */
void   google__cloud__dialogflow__v2beta1__sentiment_analysis_result__init
                     (Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisResult         *message);
size_t google__cloud__dialogflow__v2beta1__sentiment_analysis_result__get_packed_size
                     (const Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisResult   *message);
size_t google__cloud__dialogflow__v2beta1__sentiment_analysis_result__pack
                     (const Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisResult   *message,
                      uint8_t             *out);
size_t google__cloud__dialogflow__v2beta1__sentiment_analysis_result__pack_to_buffer
                     (const Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisResult   *message,
                      ProtobufCBuffer     *buffer);
Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisResult *
       google__cloud__dialogflow__v2beta1__sentiment_analysis_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__cloud__dialogflow__v2beta1__sentiment_analysis_result__free_unpacked
                     (Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisResult *message,
                      ProtobufCAllocator *allocator);
/* Google__Cloud__Dialogflow__V2beta1__Sentiment methods */
void   google__cloud__dialogflow__v2beta1__sentiment__init
                     (Google__Cloud__Dialogflow__V2beta1__Sentiment         *message);
size_t google__cloud__dialogflow__v2beta1__sentiment__get_packed_size
                     (const Google__Cloud__Dialogflow__V2beta1__Sentiment   *message);
size_t google__cloud__dialogflow__v2beta1__sentiment__pack
                     (const Google__Cloud__Dialogflow__V2beta1__Sentiment   *message,
                      uint8_t             *out);
size_t google__cloud__dialogflow__v2beta1__sentiment__pack_to_buffer
                     (const Google__Cloud__Dialogflow__V2beta1__Sentiment   *message,
                      ProtobufCBuffer     *buffer);
Google__Cloud__Dialogflow__V2beta1__Sentiment *
       google__cloud__dialogflow__v2beta1__sentiment__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__cloud__dialogflow__v2beta1__sentiment__free_unpacked
                     (Google__Cloud__Dialogflow__V2beta1__Sentiment *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Google__Cloud__Dialogflow__V2beta1__DetectIntentRequest_Closure)
                 (const Google__Cloud__Dialogflow__V2beta1__DetectIntentRequest *message,
                  void *closure_data);
typedef void (*Google__Cloud__Dialogflow__V2beta1__DetectIntentResponse_Closure)
                 (const Google__Cloud__Dialogflow__V2beta1__DetectIntentResponse *message,
                  void *closure_data);
typedef void (*Google__Cloud__Dialogflow__V2beta1__QueryParameters_Closure)
                 (const Google__Cloud__Dialogflow__V2beta1__QueryParameters *message,
                  void *closure_data);
typedef void (*Google__Cloud__Dialogflow__V2beta1__QueryInput_Closure)
                 (const Google__Cloud__Dialogflow__V2beta1__QueryInput *message,
                  void *closure_data);
typedef void (*Google__Cloud__Dialogflow__V2beta1__QueryResult_Closure)
                 (const Google__Cloud__Dialogflow__V2beta1__QueryResult *message,
                  void *closure_data);
typedef void (*Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers__Answer_Closure)
                 (const Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers__Answer *message,
                  void *closure_data);
typedef void (*Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers_Closure)
                 (const Google__Cloud__Dialogflow__V2beta1__KnowledgeAnswers *message,
                  void *closure_data);
typedef void (*Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentRequest_Closure)
                 (const Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentRequest *message,
                  void *closure_data);
typedef void (*Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentResponse_Closure)
                 (const Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentResponse *message,
                  void *closure_data);
typedef void (*Google__Cloud__Dialogflow__V2beta1__StreamingRecognitionResult_Closure)
                 (const Google__Cloud__Dialogflow__V2beta1__StreamingRecognitionResult *message,
                  void *closure_data);
typedef void (*Google__Cloud__Dialogflow__V2beta1__InputAudioConfig_Closure)
                 (const Google__Cloud__Dialogflow__V2beta1__InputAudioConfig *message,
                  void *closure_data);
typedef void (*Google__Cloud__Dialogflow__V2beta1__TextInput_Closure)
                 (const Google__Cloud__Dialogflow__V2beta1__TextInput *message,
                  void *closure_data);
typedef void (*Google__Cloud__Dialogflow__V2beta1__EventInput_Closure)
                 (const Google__Cloud__Dialogflow__V2beta1__EventInput *message,
                  void *closure_data);
typedef void (*Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisRequestConfig_Closure)
                 (const Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisRequestConfig *message,
                  void *closure_data);
typedef void (*Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisResult_Closure)
                 (const Google__Cloud__Dialogflow__V2beta1__SentimentAnalysisResult *message,
                  void *closure_data);
typedef void (*Google__Cloud__Dialogflow__V2beta1__Sentiment_Closure)
                 (const Google__Cloud__Dialogflow__V2beta1__Sentiment *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Google__Cloud__Dialogflow__V2beta1__Sessions_Service Google__Cloud__Dialogflow__V2beta1__Sessions_Service;
struct _Google__Cloud__Dialogflow__V2beta1__Sessions_Service
{
  ProtobufCService base;
  void (*detect_intent)(Google__Cloud__Dialogflow__V2beta1__Sessions_Service *service,
                        const Google__Cloud__Dialogflow__V2beta1__DetectIntentRequest *input,
                        Google__Cloud__Dialogflow__V2beta1__DetectIntentResponse_Closure closure,
                        void *closure_data);
  void (*streaming_detect_intent)(Google__Cloud__Dialogflow__V2beta1__Sessions_Service *service,
                                  const Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentRequest *input,
                                  Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentResponse_Closure closure,
                                  void *closure_data);
};
typedef void (*Google__Cloud__Dialogflow__V2beta1__Sessions_ServiceDestroy)(Google__Cloud__Dialogflow__V2beta1__Sessions_Service *);
void google__cloud__dialogflow__v2beta1__sessions__init (Google__Cloud__Dialogflow__V2beta1__Sessions_Service *service,
                                                         Google__Cloud__Dialogflow__V2beta1__Sessions_ServiceDestroy destroy);
#define GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__SESSIONS__BASE_INIT \
    { &google__cloud__dialogflow__v2beta1__sessions__descriptor, protobuf_c_service_invoke_internal, NULL }
#define GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__SESSIONS__INIT(function_prefix__) \
    { GOOGLE__CLOUD__DIALOGFLOW__V2BETA1__SESSIONS__BASE_INIT,\
      function_prefix__ ## detect_intent,\
      function_prefix__ ## streaming_detect_intent  }
void google__cloud__dialogflow__v2beta1__sessions__detect_intent(ProtobufCService *service,
                                                                 const Google__Cloud__Dialogflow__V2beta1__DetectIntentRequest *input,
                                                                 Google__Cloud__Dialogflow__V2beta1__DetectIntentResponse_Closure closure,
                                                                 void *closure_data);
void google__cloud__dialogflow__v2beta1__sessions__streaming_detect_intent(ProtobufCService *service,
                                                                           const Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentRequest *input,
                                                                           Google__Cloud__Dialogflow__V2beta1__StreamingDetectIntentResponse_Closure closure,
                                                                           void *closure_data);

/* --- descriptors --- */

extern const ProtobufCEnumDescriptor    google__cloud__dialogflow__v2beta1__audio_encoding__descriptor;
extern const ProtobufCMessageDescriptor google__cloud__dialogflow__v2beta1__detect_intent_request__descriptor;
extern const ProtobufCMessageDescriptor google__cloud__dialogflow__v2beta1__detect_intent_response__descriptor;
extern const ProtobufCMessageDescriptor google__cloud__dialogflow__v2beta1__query_parameters__descriptor;
extern const ProtobufCMessageDescriptor google__cloud__dialogflow__v2beta1__query_input__descriptor;
extern const ProtobufCMessageDescriptor google__cloud__dialogflow__v2beta1__query_result__descriptor;
extern const ProtobufCMessageDescriptor google__cloud__dialogflow__v2beta1__knowledge_answers__descriptor;
extern const ProtobufCMessageDescriptor google__cloud__dialogflow__v2beta1__knowledge_answers__answer__descriptor;
extern const ProtobufCEnumDescriptor    google__cloud__dialogflow__v2beta1__knowledge_answers__answer__match_confidence_level__descriptor;
extern const ProtobufCMessageDescriptor google__cloud__dialogflow__v2beta1__streaming_detect_intent_request__descriptor;
extern const ProtobufCMessageDescriptor google__cloud__dialogflow__v2beta1__streaming_detect_intent_response__descriptor;
extern const ProtobufCMessageDescriptor google__cloud__dialogflow__v2beta1__streaming_recognition_result__descriptor;
extern const ProtobufCEnumDescriptor    google__cloud__dialogflow__v2beta1__streaming_recognition_result__message_type__descriptor;
extern const ProtobufCMessageDescriptor google__cloud__dialogflow__v2beta1__input_audio_config__descriptor;
extern const ProtobufCMessageDescriptor google__cloud__dialogflow__v2beta1__text_input__descriptor;
extern const ProtobufCMessageDescriptor google__cloud__dialogflow__v2beta1__event_input__descriptor;
extern const ProtobufCMessageDescriptor google__cloud__dialogflow__v2beta1__sentiment_analysis_request_config__descriptor;
extern const ProtobufCMessageDescriptor google__cloud__dialogflow__v2beta1__sentiment_analysis_result__descriptor;
extern const ProtobufCMessageDescriptor google__cloud__dialogflow__v2beta1__sentiment__descriptor;
extern const ProtobufCServiceDescriptor google__cloud__dialogflow__v2beta1__sessions__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_google_2fcloud_2fdialogflow_2fv2beta1_2fsession_2eproto__INCLUDED */
