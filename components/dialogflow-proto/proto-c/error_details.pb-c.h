/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: google/rpc/error_details.proto */

#ifndef PROTOBUF_C_google_2frpc_2ferror_5fdetails_2eproto__INCLUDED
#define PROTOBUF_C_google_2frpc_2ferror_5fdetails_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "duration.pb-c.h"

typedef struct _Google__Rpc__RetryInfo Google__Rpc__RetryInfo;
typedef struct _Google__Rpc__DebugInfo Google__Rpc__DebugInfo;
typedef struct _Google__Rpc__QuotaFailure Google__Rpc__QuotaFailure;
typedef struct _Google__Rpc__QuotaFailure__Violation Google__Rpc__QuotaFailure__Violation;
typedef struct _Google__Rpc__PreconditionFailure Google__Rpc__PreconditionFailure;
typedef struct _Google__Rpc__PreconditionFailure__Violation Google__Rpc__PreconditionFailure__Violation;
typedef struct _Google__Rpc__BadRequest Google__Rpc__BadRequest;
typedef struct _Google__Rpc__BadRequest__FieldViolation Google__Rpc__BadRequest__FieldViolation;
typedef struct _Google__Rpc__RequestInfo Google__Rpc__RequestInfo;
typedef struct _Google__Rpc__ResourceInfo Google__Rpc__ResourceInfo;
typedef struct _Google__Rpc__Help Google__Rpc__Help;
typedef struct _Google__Rpc__Help__Link Google__Rpc__Help__Link;
typedef struct _Google__Rpc__LocalizedMessage Google__Rpc__LocalizedMessage;


/* --- enums --- */


/* --- messages --- */

/*
 * Describes when the clients can retry a failed request. Clients could ignore
 * the recommendation here or retry when this information is missing from error
 * responses.
 * It's always recommended that clients should use exponential backoff when
 * retrying.
 * Clients should wait until `retry_delay` amount of time has passed since
 * receiving the error response before retrying.  If retrying requests also
 * fail, clients should use an exponential backoff scheme to gradually increase
 * the delay between retries based on `retry_delay`, until either a maximum
 * number of retires have been reached or a maximum retry delay cap has been
 * reached.
 */
struct  _Google__Rpc__RetryInfo
{
  ProtobufCMessage base;
  /*
   * Clients should wait at least this long between retrying the same request.
   */
  Google__Protobuf__Duration *retry_delay;
};
#define GOOGLE__RPC__RETRY_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__rpc__retry_info__descriptor) \
    , NULL }


/*
 * Describes additional debugging info.
 */
struct  _Google__Rpc__DebugInfo
{
  ProtobufCMessage base;
  /*
   * The stack trace entries indicating where the error occurred.
   */
  size_t n_stack_entries;
  char **stack_entries;
  /*
   * Additional debugging information provided by the server.
   */
  char *detail;
};
#define GOOGLE__RPC__DEBUG_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__rpc__debug_info__descriptor) \
    , 0,NULL, (char *)protobuf_c_empty_string }


/*
 * A message type used to describe a single quota violation.  For example, a
 * daily quota or a custom quota that was exceeded.
 */
struct  _Google__Rpc__QuotaFailure__Violation
{
  ProtobufCMessage base;
  /*
   * The subject on which the quota check failed.
   * For example, "clientip:<ip address of client>" or "project:<Google
   * developer project id>".
   */
  char *subject;
  /*
   * A description of how the quota check failed. Clients can use this
   * description to find more about the quota configuration in the service's
   * public documentation, or find the relevant quota limit to adjust through
   * developer console.
   * For example: "Service disabled" or "Daily Limit for read operations
   * exceeded".
   */
  char *description;
};
#define GOOGLE__RPC__QUOTA_FAILURE__VIOLATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__rpc__quota_failure__violation__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Describes how a quota check failed.
 * For example if a daily limit was exceeded for the calling project,
 * a service could respond with a QuotaFailure detail containing the project
 * id and the description of the quota limit that was exceeded.  If the
 * calling project hasn't enabled the service in the developer console, then
 * a service could respond with the project id and set `service_disabled`
 * to true.
 * Also see RetryDetail and Help types for other details about handling a
 * quota failure.
 */
struct  _Google__Rpc__QuotaFailure
{
  ProtobufCMessage base;
  /*
   * Describes all quota violations.
   */
  size_t n_violations;
  Google__Rpc__QuotaFailure__Violation **violations;
};
#define GOOGLE__RPC__QUOTA_FAILURE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__rpc__quota_failure__descriptor) \
    , 0,NULL }


/*
 * A message type used to describe a single precondition failure.
 */
struct  _Google__Rpc__PreconditionFailure__Violation
{
  ProtobufCMessage base;
  /*
   * The type of PreconditionFailure. We recommend using a service-specific
   * enum type to define the supported precondition violation types. For
   * example, "TOS" for "Terms of Service violation".
   */
  char *type;
  /*
   * The subject, relative to the type, that failed.
   * For example, "google.com/cloud" relative to the "TOS" type would
   * indicate which terms of service is being referenced.
   */
  char *subject;
  /*
   * A description of how the precondition failed. Developers can use this
   * description to understand how to fix the failure.
   * For example: "Terms of service not accepted".
   */
  char *description;
};
#define GOOGLE__RPC__PRECONDITION_FAILURE__VIOLATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__rpc__precondition_failure__violation__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Describes what preconditions have failed.
 * For example, if an RPC failed because it required the Terms of Service to be
 * acknowledged, it could list the terms of service violation in the
 * PreconditionFailure message.
 */
struct  _Google__Rpc__PreconditionFailure
{
  ProtobufCMessage base;
  /*
   * Describes all precondition violations.
   */
  size_t n_violations;
  Google__Rpc__PreconditionFailure__Violation **violations;
};
#define GOOGLE__RPC__PRECONDITION_FAILURE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__rpc__precondition_failure__descriptor) \
    , 0,NULL }


/*
 * A message type used to describe a single bad request field.
 */
struct  _Google__Rpc__BadRequest__FieldViolation
{
  ProtobufCMessage base;
  /*
   * A path leading to a field in the request body. The value will be a
   * sequence of dot-separated identifiers that identify a protocol buffer
   * field. E.g., "field_violations.field" would identify this field.
   */
  char *field;
  /*
   * A description of why the request element is bad.
   */
  char *description;
};
#define GOOGLE__RPC__BAD_REQUEST__FIELD_VIOLATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__rpc__bad_request__field_violation__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Describes violations in a client request. This error type focuses on the
 * syntactic aspects of the request.
 */
struct  _Google__Rpc__BadRequest
{
  ProtobufCMessage base;
  /*
   * Describes all violations in a client request.
   */
  size_t n_field_violations;
  Google__Rpc__BadRequest__FieldViolation **field_violations;
};
#define GOOGLE__RPC__BAD_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__rpc__bad_request__descriptor) \
    , 0,NULL }


/*
 * Contains metadata about the request that clients can attach when filing a bug
 * or providing other forms of feedback.
 */
struct  _Google__Rpc__RequestInfo
{
  ProtobufCMessage base;
  /*
   * An opaque string that should only be interpreted by the service generating
   * it. For example, it can be used to identify requests in the service's logs.
   */
  char *request_id;
  /*
   * Any data that was used to serve this request. For example, an encrypted
   * stack trace that can be sent back to the service provider for debugging.
   */
  char *serving_data;
};
#define GOOGLE__RPC__REQUEST_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__rpc__request_info__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Describes the resource that is being accessed.
 */
struct  _Google__Rpc__ResourceInfo
{
  ProtobufCMessage base;
  /*
   * A name for the type of resource being accessed, e.g. "sql table",
   * "cloud storage bucket", "file", "Google calendar"; or the type URL
   * of the resource: e.g. "type.googleapis.com/google.pubsub.v1.Topic".
   */
  char *resource_type;
  /*
   * The name of the resource being accessed.  For example, a shared calendar
   * name: "example.com_4fghdhgsrgh@group.calendar.google.com", if the current
   * error is [google.rpc.Code.PERMISSION_DENIED][google.rpc.Code.PERMISSION_DENIED].
   */
  char *resource_name;
  /*
   * The owner of the resource (optional).
   * For example, "user:<owner email>" or "project:<Google developer project
   * id>".
   */
  char *owner;
  /*
   * Describes what error is encountered when accessing this resource.
   * For example, updating a cloud project may require the `writer` permission
   * on the developer console project.
   */
  char *description;
};
#define GOOGLE__RPC__RESOURCE_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__rpc__resource_info__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Describes a URL link.
 */
struct  _Google__Rpc__Help__Link
{
  ProtobufCMessage base;
  /*
   * Describes what the link offers.
   */
  char *description;
  /*
   * The URL of the link.
   */
  char *url;
};
#define GOOGLE__RPC__HELP__LINK__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__rpc__help__link__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * Provides links to documentation or for performing an out of band action.
 * For example, if a quota check failed with an error indicating the calling
 * project hasn't enabled the accessed service, this can contain a URL pointing
 * directly to the right place in the developer console to flip the bit.
 */
struct  _Google__Rpc__Help
{
  ProtobufCMessage base;
  /*
   * URL(s) pointing to additional information on handling the current error.
   */
  size_t n_links;
  Google__Rpc__Help__Link **links;
};
#define GOOGLE__RPC__HELP__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__rpc__help__descriptor) \
    , 0,NULL }


/*
 * Provides a localized error message that is safe to return to the user
 * which can be attached to an RPC error.
 */
struct  _Google__Rpc__LocalizedMessage
{
  ProtobufCMessage base;
  /*
   * The locale used following the specification defined at
   * http://www.rfc-editor.org/rfc/bcp/bcp47.txt.
   * Examples are: "en-US", "fr-CH", "es-MX"
   */
  char *locale;
  /*
   * The localized error message in the above locale.
   */
  char *message;
};
#define GOOGLE__RPC__LOCALIZED_MESSAGE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__rpc__localized_message__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/* Google__Rpc__RetryInfo methods */
void   google__rpc__retry_info__init
                     (Google__Rpc__RetryInfo         *message);
size_t google__rpc__retry_info__get_packed_size
                     (const Google__Rpc__RetryInfo   *message);
size_t google__rpc__retry_info__pack
                     (const Google__Rpc__RetryInfo   *message,
                      uint8_t             *out);
size_t google__rpc__retry_info__pack_to_buffer
                     (const Google__Rpc__RetryInfo   *message,
                      ProtobufCBuffer     *buffer);
Google__Rpc__RetryInfo *
       google__rpc__retry_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__rpc__retry_info__free_unpacked
                     (Google__Rpc__RetryInfo *message,
                      ProtobufCAllocator *allocator);
/* Google__Rpc__DebugInfo methods */
void   google__rpc__debug_info__init
                     (Google__Rpc__DebugInfo         *message);
size_t google__rpc__debug_info__get_packed_size
                     (const Google__Rpc__DebugInfo   *message);
size_t google__rpc__debug_info__pack
                     (const Google__Rpc__DebugInfo   *message,
                      uint8_t             *out);
size_t google__rpc__debug_info__pack_to_buffer
                     (const Google__Rpc__DebugInfo   *message,
                      ProtobufCBuffer     *buffer);
Google__Rpc__DebugInfo *
       google__rpc__debug_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__rpc__debug_info__free_unpacked
                     (Google__Rpc__DebugInfo *message,
                      ProtobufCAllocator *allocator);
/* Google__Rpc__QuotaFailure__Violation methods */
void   google__rpc__quota_failure__violation__init
                     (Google__Rpc__QuotaFailure__Violation         *message);
/* Google__Rpc__QuotaFailure methods */
void   google__rpc__quota_failure__init
                     (Google__Rpc__QuotaFailure         *message);
size_t google__rpc__quota_failure__get_packed_size
                     (const Google__Rpc__QuotaFailure   *message);
size_t google__rpc__quota_failure__pack
                     (const Google__Rpc__QuotaFailure   *message,
                      uint8_t             *out);
size_t google__rpc__quota_failure__pack_to_buffer
                     (const Google__Rpc__QuotaFailure   *message,
                      ProtobufCBuffer     *buffer);
Google__Rpc__QuotaFailure *
       google__rpc__quota_failure__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__rpc__quota_failure__free_unpacked
                     (Google__Rpc__QuotaFailure *message,
                      ProtobufCAllocator *allocator);
/* Google__Rpc__PreconditionFailure__Violation methods */
void   google__rpc__precondition_failure__violation__init
                     (Google__Rpc__PreconditionFailure__Violation         *message);
/* Google__Rpc__PreconditionFailure methods */
void   google__rpc__precondition_failure__init
                     (Google__Rpc__PreconditionFailure         *message);
size_t google__rpc__precondition_failure__get_packed_size
                     (const Google__Rpc__PreconditionFailure   *message);
size_t google__rpc__precondition_failure__pack
                     (const Google__Rpc__PreconditionFailure   *message,
                      uint8_t             *out);
size_t google__rpc__precondition_failure__pack_to_buffer
                     (const Google__Rpc__PreconditionFailure   *message,
                      ProtobufCBuffer     *buffer);
Google__Rpc__PreconditionFailure *
       google__rpc__precondition_failure__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__rpc__precondition_failure__free_unpacked
                     (Google__Rpc__PreconditionFailure *message,
                      ProtobufCAllocator *allocator);
/* Google__Rpc__BadRequest__FieldViolation methods */
void   google__rpc__bad_request__field_violation__init
                     (Google__Rpc__BadRequest__FieldViolation         *message);
/* Google__Rpc__BadRequest methods */
void   google__rpc__bad_request__init
                     (Google__Rpc__BadRequest         *message);
size_t google__rpc__bad_request__get_packed_size
                     (const Google__Rpc__BadRequest   *message);
size_t google__rpc__bad_request__pack
                     (const Google__Rpc__BadRequest   *message,
                      uint8_t             *out);
size_t google__rpc__bad_request__pack_to_buffer
                     (const Google__Rpc__BadRequest   *message,
                      ProtobufCBuffer     *buffer);
Google__Rpc__BadRequest *
       google__rpc__bad_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__rpc__bad_request__free_unpacked
                     (Google__Rpc__BadRequest *message,
                      ProtobufCAllocator *allocator);
/* Google__Rpc__RequestInfo methods */
void   google__rpc__request_info__init
                     (Google__Rpc__RequestInfo         *message);
size_t google__rpc__request_info__get_packed_size
                     (const Google__Rpc__RequestInfo   *message);
size_t google__rpc__request_info__pack
                     (const Google__Rpc__RequestInfo   *message,
                      uint8_t             *out);
size_t google__rpc__request_info__pack_to_buffer
                     (const Google__Rpc__RequestInfo   *message,
                      ProtobufCBuffer     *buffer);
Google__Rpc__RequestInfo *
       google__rpc__request_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__rpc__request_info__free_unpacked
                     (Google__Rpc__RequestInfo *message,
                      ProtobufCAllocator *allocator);
/* Google__Rpc__ResourceInfo methods */
void   google__rpc__resource_info__init
                     (Google__Rpc__ResourceInfo         *message);
size_t google__rpc__resource_info__get_packed_size
                     (const Google__Rpc__ResourceInfo   *message);
size_t google__rpc__resource_info__pack
                     (const Google__Rpc__ResourceInfo   *message,
                      uint8_t             *out);
size_t google__rpc__resource_info__pack_to_buffer
                     (const Google__Rpc__ResourceInfo   *message,
                      ProtobufCBuffer     *buffer);
Google__Rpc__ResourceInfo *
       google__rpc__resource_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__rpc__resource_info__free_unpacked
                     (Google__Rpc__ResourceInfo *message,
                      ProtobufCAllocator *allocator);
/* Google__Rpc__Help__Link methods */
void   google__rpc__help__link__init
                     (Google__Rpc__Help__Link         *message);
/* Google__Rpc__Help methods */
void   google__rpc__help__init
                     (Google__Rpc__Help         *message);
size_t google__rpc__help__get_packed_size
                     (const Google__Rpc__Help   *message);
size_t google__rpc__help__pack
                     (const Google__Rpc__Help   *message,
                      uint8_t             *out);
size_t google__rpc__help__pack_to_buffer
                     (const Google__Rpc__Help   *message,
                      ProtobufCBuffer     *buffer);
Google__Rpc__Help *
       google__rpc__help__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__rpc__help__free_unpacked
                     (Google__Rpc__Help *message,
                      ProtobufCAllocator *allocator);
/* Google__Rpc__LocalizedMessage methods */
void   google__rpc__localized_message__init
                     (Google__Rpc__LocalizedMessage         *message);
size_t google__rpc__localized_message__get_packed_size
                     (const Google__Rpc__LocalizedMessage   *message);
size_t google__rpc__localized_message__pack
                     (const Google__Rpc__LocalizedMessage   *message,
                      uint8_t             *out);
size_t google__rpc__localized_message__pack_to_buffer
                     (const Google__Rpc__LocalizedMessage   *message,
                      ProtobufCBuffer     *buffer);
Google__Rpc__LocalizedMessage *
       google__rpc__localized_message__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__rpc__localized_message__free_unpacked
                     (Google__Rpc__LocalizedMessage *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Google__Rpc__RetryInfo_Closure)
                 (const Google__Rpc__RetryInfo *message,
                  void *closure_data);
typedef void (*Google__Rpc__DebugInfo_Closure)
                 (const Google__Rpc__DebugInfo *message,
                  void *closure_data);
typedef void (*Google__Rpc__QuotaFailure__Violation_Closure)
                 (const Google__Rpc__QuotaFailure__Violation *message,
                  void *closure_data);
typedef void (*Google__Rpc__QuotaFailure_Closure)
                 (const Google__Rpc__QuotaFailure *message,
                  void *closure_data);
typedef void (*Google__Rpc__PreconditionFailure__Violation_Closure)
                 (const Google__Rpc__PreconditionFailure__Violation *message,
                  void *closure_data);
typedef void (*Google__Rpc__PreconditionFailure_Closure)
                 (const Google__Rpc__PreconditionFailure *message,
                  void *closure_data);
typedef void (*Google__Rpc__BadRequest__FieldViolation_Closure)
                 (const Google__Rpc__BadRequest__FieldViolation *message,
                  void *closure_data);
typedef void (*Google__Rpc__BadRequest_Closure)
                 (const Google__Rpc__BadRequest *message,
                  void *closure_data);
typedef void (*Google__Rpc__RequestInfo_Closure)
                 (const Google__Rpc__RequestInfo *message,
                  void *closure_data);
typedef void (*Google__Rpc__ResourceInfo_Closure)
                 (const Google__Rpc__ResourceInfo *message,
                  void *closure_data);
typedef void (*Google__Rpc__Help__Link_Closure)
                 (const Google__Rpc__Help__Link *message,
                  void *closure_data);
typedef void (*Google__Rpc__Help_Closure)
                 (const Google__Rpc__Help *message,
                  void *closure_data);
typedef void (*Google__Rpc__LocalizedMessage_Closure)
                 (const Google__Rpc__LocalizedMessage *message,
                  void *closure_data);

/* --- services --- */


/* --- descriptors --- */

extern const ProtobufCMessageDescriptor google__rpc__retry_info__descriptor;
extern const ProtobufCMessageDescriptor google__rpc__debug_info__descriptor;
extern const ProtobufCMessageDescriptor google__rpc__quota_failure__descriptor;
extern const ProtobufCMessageDescriptor google__rpc__quota_failure__violation__descriptor;
extern const ProtobufCMessageDescriptor google__rpc__precondition_failure__descriptor;
extern const ProtobufCMessageDescriptor google__rpc__precondition_failure__violation__descriptor;
extern const ProtobufCMessageDescriptor google__rpc__bad_request__descriptor;
extern const ProtobufCMessageDescriptor google__rpc__bad_request__field_violation__descriptor;
extern const ProtobufCMessageDescriptor google__rpc__request_info__descriptor;
extern const ProtobufCMessageDescriptor google__rpc__resource_info__descriptor;
extern const ProtobufCMessageDescriptor google__rpc__help__descriptor;
extern const ProtobufCMessageDescriptor google__rpc__help__link__descriptor;
extern const ProtobufCMessageDescriptor google__rpc__localized_message__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_google_2frpc_2ferror_5fdetails_2eproto__INCLUDED */
