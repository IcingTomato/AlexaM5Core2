/* Generated by the protocol buffer compiler.  DO NOT EDIT! */
/* Generated from: google/assistant/embedded/v1alpha2/embedded_assistant.proto */

#ifndef PROTOBUF_C_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto__INCLUDED
#define PROTOBUF_C_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto__INCLUDED

#include <protobuf-c/protobuf-c.h>

PROTOBUF_C__BEGIN_DECLS

#if PROTOBUF_C_VERSION_NUMBER < 1003000
# error This file was generated by a newer version of protoc-c which is incompatible with your libprotobuf-c headers. Please update your headers.
#elif 1003000 < PROTOBUF_C_MIN_COMPILER_VERSION
# error This file was generated by an older version of protoc-c which is incompatible with your libprotobuf-c headers. Please regenerate this file with a newer version of protoc-c.
#endif

#include "annotations.pb-c.h"
#include "latlng.pb-c.h"

typedef struct _Google__Assistant__Embedded__V1alpha2__AssistRequest Google__Assistant__Embedded__V1alpha2__AssistRequest;
typedef struct _Google__Assistant__Embedded__V1alpha2__AssistResponse Google__Assistant__Embedded__V1alpha2__AssistResponse;
typedef struct _Google__Assistant__Embedded__V1alpha2__DebugInfo Google__Assistant__Embedded__V1alpha2__DebugInfo;
typedef struct _Google__Assistant__Embedded__V1alpha2__AssistConfig Google__Assistant__Embedded__V1alpha2__AssistConfig;
typedef struct _Google__Assistant__Embedded__V1alpha2__AudioInConfig Google__Assistant__Embedded__V1alpha2__AudioInConfig;
typedef struct _Google__Assistant__Embedded__V1alpha2__AudioOutConfig Google__Assistant__Embedded__V1alpha2__AudioOutConfig;
typedef struct _Google__Assistant__Embedded__V1alpha2__ScreenOutConfig Google__Assistant__Embedded__V1alpha2__ScreenOutConfig;
typedef struct _Google__Assistant__Embedded__V1alpha2__DialogStateIn Google__Assistant__Embedded__V1alpha2__DialogStateIn;
typedef struct _Google__Assistant__Embedded__V1alpha2__DeviceConfig Google__Assistant__Embedded__V1alpha2__DeviceConfig;
typedef struct _Google__Assistant__Embedded__V1alpha2__AudioOut Google__Assistant__Embedded__V1alpha2__AudioOut;
typedef struct _Google__Assistant__Embedded__V1alpha2__ScreenOut Google__Assistant__Embedded__V1alpha2__ScreenOut;
typedef struct _Google__Assistant__Embedded__V1alpha2__DeviceAction Google__Assistant__Embedded__V1alpha2__DeviceAction;
typedef struct _Google__Assistant__Embedded__V1alpha2__SpeechRecognitionResult Google__Assistant__Embedded__V1alpha2__SpeechRecognitionResult;
typedef struct _Google__Assistant__Embedded__V1alpha2__DialogStateOut Google__Assistant__Embedded__V1alpha2__DialogStateOut;
typedef struct _Google__Assistant__Embedded__V1alpha2__DebugConfig Google__Assistant__Embedded__V1alpha2__DebugConfig;
typedef struct _Google__Assistant__Embedded__V1alpha2__DeviceLocation Google__Assistant__Embedded__V1alpha2__DeviceLocation;


/* --- enums --- */

/*
 * Indicates the type of event.
 */
typedef enum _Google__Assistant__Embedded__V1alpha2__AssistResponse__EventType {
  /*
   * No event specified.
   */
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__ASSIST_RESPONSE__EVENT_TYPE__EVENT_TYPE_UNSPECIFIED = 0,
  /*
   * This event indicates that the server has detected the end of the user's
   * speech utterance and expects no additional speech. Therefore, the server
   * will not process additional audio (although it may subsequently return
   * additional results). The client should stop sending additional audio
   * data, half-close the gRPC connection, and wait for any additional results
   * until the server closes the gRPC connection.
   */
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__ASSIST_RESPONSE__EVENT_TYPE__END_OF_UTTERANCE = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__ASSIST_RESPONSE__EVENT_TYPE)
} Google__Assistant__Embedded__V1alpha2__AssistResponse__EventType;
/*
 * Audio encoding of the data sent in the audio message.
 * Audio must be one-channel (mono).
 */
typedef enum _Google__Assistant__Embedded__V1alpha2__AudioInConfig__Encoding {
  /*
   * Not specified. Will return result [google.rpc.Code.INVALID_ARGUMENT][].
   */
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__AUDIO_IN_CONFIG__ENCODING__ENCODING_UNSPECIFIED = 0,
  /*
   * Uncompressed 16-bit signed little-endian samples (Linear PCM).
   * This encoding includes no header, only the raw audio bytes.
   */
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__AUDIO_IN_CONFIG__ENCODING__LINEAR16 = 1,
  /*
   * [`FLAC`](https://xiph.org/flac/documentation.html) (Free Lossless Audio
   * Codec) is the recommended encoding because it is
   * lossless--therefore recognition is not compromised--and
   * requires only about half the bandwidth of `LINEAR16`. This encoding
   * includes the `FLAC` stream header followed by audio data. It supports
   * 16-bit and 24-bit samples, however, not all fields in `STREAMINFO` are
   * supported.
   */
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__AUDIO_IN_CONFIG__ENCODING__FLAC = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__AUDIO_IN_CONFIG__ENCODING)
} Google__Assistant__Embedded__V1alpha2__AudioInConfig__Encoding;
/*
 * Audio encoding of the data returned in the audio message. All encodings are
 * raw audio bytes with no header, except as indicated below.
 */
typedef enum _Google__Assistant__Embedded__V1alpha2__AudioOutConfig__Encoding {
  /*
   * Not specified. Will return result [google.rpc.Code.INVALID_ARGUMENT][].
   */
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__AUDIO_OUT_CONFIG__ENCODING__ENCODING_UNSPECIFIED = 0,
  /*
   * Uncompressed 16-bit signed little-endian samples (Linear PCM).
   */
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__AUDIO_OUT_CONFIG__ENCODING__LINEAR16 = 1,
  /*
   * MP3 audio encoding. The sample rate is encoded in the payload.
   */
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__AUDIO_OUT_CONFIG__ENCODING__MP3 = 2,
  /*
   * Opus-encoded audio wrapped in an ogg container. The result will be a
   * file which can be played natively on Android and in some browsers (such
   * as Chrome). The quality of the encoding is considerably higher than MP3
   * while using the same bitrate. The sample rate is encoded in the payload.
   */
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__AUDIO_OUT_CONFIG__ENCODING__OPUS_IN_OGG = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__AUDIO_OUT_CONFIG__ENCODING)
} Google__Assistant__Embedded__V1alpha2__AudioOutConfig__Encoding;
/*
 * Possible modes for visual screen-output on the device.
 */
typedef enum _Google__Assistant__Embedded__V1alpha2__ScreenOutConfig__ScreenMode {
  /*
   * No video mode specified.
   * The Assistant may respond as if in `OFF` mode.
   */
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__SCREEN_OUT_CONFIG__SCREEN_MODE__SCREEN_MODE_UNSPECIFIED = 0,
  /*
   * Screen is off (or has brightness or other settings set so low it is
   * not visible). The Assistant will typically not return a screen response
   * in this mode.
   */
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__SCREEN_OUT_CONFIG__SCREEN_MODE__OFF = 1,
  /*
   * The Assistant will typically return a partial-screen response in this
   * mode.
   */
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__SCREEN_OUT_CONFIG__SCREEN_MODE__PLAYING = 3
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__SCREEN_OUT_CONFIG__SCREEN_MODE)
} Google__Assistant__Embedded__V1alpha2__ScreenOutConfig__ScreenMode;
/*
 * Possible formats of the screen data.
 */
typedef enum _Google__Assistant__Embedded__V1alpha2__ScreenOut__Format {
  /*
   * No format specified.
   */
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__SCREEN_OUT__FORMAT__FORMAT_UNSPECIFIED = 0,
  /*
   * Data will contain a fully-formed HTML5 layout encoded in UTF-8, e.g.
   * `<html><body><div>...</div></body></html>`. It is intended to be rendered
   * along with the audio response. Note that HTML5 doctype should be included
   * in the actual HTML data.
   */
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__SCREEN_OUT__FORMAT__HTML = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__SCREEN_OUT__FORMAT)
} Google__Assistant__Embedded__V1alpha2__ScreenOut__Format;
/*
 * Possible states of the microphone after a `Assist` RPC completes.
 */
typedef enum _Google__Assistant__Embedded__V1alpha2__DialogStateOut__MicrophoneMode {
  /*
   * No mode specified.
   */
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__DIALOG_STATE_OUT__MICROPHONE_MODE__MICROPHONE_MODE_UNSPECIFIED = 0,
  /*
   * The service is not expecting a follow-on question from the user.
   * The microphone should remain off until the user re-activates it.
   */
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__DIALOG_STATE_OUT__MICROPHONE_MODE__CLOSE_MICROPHONE = 1,
  /*
   * The service is expecting a follow-on question from the user. The
   * microphone should be re-opened when the `AudioOut` playback completes
   * (by starting a new `Assist` RPC call to send the new audio).
   */
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__DIALOG_STATE_OUT__MICROPHONE_MODE__DIALOG_FOLLOW_ON = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__DIALOG_STATE_OUT__MICROPHONE_MODE)
} Google__Assistant__Embedded__V1alpha2__DialogStateOut__MicrophoneMode;

/* --- messages --- */

typedef enum {
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__ASSIST_REQUEST__TYPE__NOT_SET = 0,
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__ASSIST_REQUEST__TYPE_CONFIG = 1,
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__ASSIST_REQUEST__TYPE_AUDIO_IN = 2
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__ASSIST_REQUEST__TYPE)
} Google__Assistant__Embedded__V1alpha2__AssistRequest__TypeCase;

/*
 * The top-level message sent by the client. Clients must send at least two, and
 * typically numerous `AssistRequest` messages. The first message must
 * contain a `config` message and must not contain `audio_in` data. All
 * subsequent messages must contain `audio_in` data and must not contain a
 * `config` message.
 */
struct  _Google__Assistant__Embedded__V1alpha2__AssistRequest
{
  ProtobufCMessage base;
  Google__Assistant__Embedded__V1alpha2__AssistRequest__TypeCase type_case;
  union {
    /*
     * The `config` message provides information to the recognizer that
     * specifies how to process the request.
     * The first `AssistRequest` message must contain a `config` message.
     */
    Google__Assistant__Embedded__V1alpha2__AssistConfig *config;
    /*
     * The audio data to be recognized. Sequential chunks of audio data are sent
     * in sequential `AssistRequest` messages. The first `AssistRequest`
     * message must not contain `audio_in` data and all subsequent
     * `AssistRequest` messages must contain `audio_in` data. The audio bytes
     * must be encoded as specified in `AudioInConfig`.
     * Audio must be sent at approximately real-time (16000 samples per second).
     * An error will be returned if audio is sent significantly faster or
     * slower.
     */
    ProtobufCBinaryData audio_in;
  };
};
#define GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__ASSIST_REQUEST__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__assistant__embedded__v1alpha2__assist_request__descriptor) \
    , GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__ASSIST_REQUEST__TYPE__NOT_SET, {0} }


/*
 * The top-level message received by the client. A series of one or more
 * `AssistResponse` messages are streamed back to the client.
 */
struct  _Google__Assistant__Embedded__V1alpha2__AssistResponse
{
  ProtobufCMessage base;
  /*
   * *Output-only* Indicates the type of event.
   */
  Google__Assistant__Embedded__V1alpha2__AssistResponse__EventType event_type;
  /*
   * *Output-only* The audio containing the Assistant's response to the query.
   */
  Google__Assistant__Embedded__V1alpha2__AudioOut *audio_out;
  /*
   * *Output-only* Contains the Assistant's visual response to the query.
   */
  Google__Assistant__Embedded__V1alpha2__ScreenOut *screen_out;
  /*
   * *Output-only* Contains the action triggered by the query with the
   * appropriate payloads and semantic parsing.
   */
  Google__Assistant__Embedded__V1alpha2__DeviceAction *device_action;
  /*
   * *Output-only* This repeated list contains zero or more speech recognition
   * results that correspond to consecutive portions of the audio currently
   * being processed, starting with the portion corresponding to the earliest
   * audio (and most stable portion) to the portion corresponding to the most
   * recent audio. The strings can be concatenated to view the full
   * in-progress response. When the speech recognition completes, this list
   * will contain one item with `stability` of `1.0`.
   */
  size_t n_speech_results;
  Google__Assistant__Embedded__V1alpha2__SpeechRecognitionResult **speech_results;
  /*
   * *Output-only* Contains output related to the user's query.
   */
  Google__Assistant__Embedded__V1alpha2__DialogStateOut *dialog_state_out;
  /*
   * *Output-only* Debugging info for developer. Only returned if request set
   * `return_debug_info` to true.
   */
  Google__Assistant__Embedded__V1alpha2__DebugInfo *debug_info;
};
#define GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__ASSIST_RESPONSE__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__assistant__embedded__v1alpha2__assist_response__descriptor) \
    , GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__ASSIST_RESPONSE__EVENT_TYPE__EVENT_TYPE_UNSPECIFIED, NULL, NULL, NULL, 0,NULL, NULL, NULL }


/*
 * Debug info for developer. Only returned if request set `return_debug_info`
 * to true.
 */
struct  _Google__Assistant__Embedded__V1alpha2__DebugInfo
{
  ProtobufCMessage base;
  /*
   * The original JSON response from an Action-on-Google agent to Google server.
   * See
   * https://developers.google.com/actions/reference/rest/Shared.Types/AppResponse.
   * It will only be populated if the request maker owns the AoG project and the
   * AoG project is in preview mode.
   */
  char *aog_agent_to_assistant_json;
};
#define GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__DEBUG_INFO__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__assistant__embedded__v1alpha2__debug_info__descriptor) \
    , (char *)protobuf_c_empty_string }


typedef enum {
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__ASSIST_CONFIG__TYPE__NOT_SET = 0,
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__ASSIST_CONFIG__TYPE_AUDIO_IN_CONFIG = 1,
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__ASSIST_CONFIG__TYPE_TEXT_QUERY = 6
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__ASSIST_CONFIG__TYPE)
} Google__Assistant__Embedded__V1alpha2__AssistConfig__TypeCase;

/*
 * Specifies how to process the `AssistRequest` messages.
 */
struct  _Google__Assistant__Embedded__V1alpha2__AssistConfig
{
  ProtobufCMessage base;
  /*
   * *Required* Specifies how to format the audio that will be returned.
   */
  Google__Assistant__Embedded__V1alpha2__AudioOutConfig *audio_out_config;
  /*
   * *Optional* Specifies the desired format to use when server returns a
   * visual screen response.
   */
  Google__Assistant__Embedded__V1alpha2__ScreenOutConfig *screen_out_config;
  /*
   * *Required* Represents the current dialog state.
   */
  Google__Assistant__Embedded__V1alpha2__DialogStateIn *dialog_state_in;
  /*
   * Device configuration that uniquely identifies a specific device.
   */
  Google__Assistant__Embedded__V1alpha2__DeviceConfig *device_config;
  /*
   * *Optional* Debugging parameters for the whole `Assist` RPC.
   */
  Google__Assistant__Embedded__V1alpha2__DebugConfig *debug_config;
  Google__Assistant__Embedded__V1alpha2__AssistConfig__TypeCase type_case;
  union {
    /*
     * Specifies how to process the subsequent incoming audio. Required if
     * [AssistRequest.audio_in][google.assistant.embedded.v1alpha2.AssistRequest.audio_in] bytes will be provided in subsequent requests.
     */
    Google__Assistant__Embedded__V1alpha2__AudioInConfig *audio_in_config;
    /*
     * The text input to be sent to the Assistant. This can be populated from a
     * text interface if audio input is not available.
     */
    char *text_query;
  };
};
#define GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__ASSIST_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__assistant__embedded__v1alpha2__assist_config__descriptor) \
    , NULL, NULL, NULL, NULL, NULL, GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__ASSIST_CONFIG__TYPE__NOT_SET, {0} }


/*
 * Specifies how to process the `audio_in` data that will be provided in
 * subsequent requests. For recommended settings, see the Google Assistant SDK
 * [best practices](https://developers.google.com/assistant/sdk/guides/service/python/best-practices/audio).
 */
struct  _Google__Assistant__Embedded__V1alpha2__AudioInConfig
{
  ProtobufCMessage base;
  /*
   * *Required* Encoding of audio data sent in all `audio_in` messages.
   */
  Google__Assistant__Embedded__V1alpha2__AudioInConfig__Encoding encoding;
  /*
   * *Required* Sample rate (in Hertz) of the audio data sent in all `audio_in`
   * messages. Valid values are from 16000-24000, but 16000 is optimal.
   * For best results, set the sampling rate of the audio source to 16000 Hz.
   * If that's not possible, use the native sample rate of the audio source
   * (instead of re-sampling).
   */
  int32_t sample_rate_hertz;
};
#define GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__AUDIO_IN_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__assistant__embedded__v1alpha2__audio_in_config__descriptor) \
    , GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__AUDIO_IN_CONFIG__ENCODING__ENCODING_UNSPECIFIED, 0 }


/*
 * Specifies the desired format for the server to use when it returns
 * `audio_out` messages.
 */
struct  _Google__Assistant__Embedded__V1alpha2__AudioOutConfig
{
  ProtobufCMessage base;
  /*
   * *Required* The encoding of audio data to be returned in all `audio_out`
   * messages.
   */
  Google__Assistant__Embedded__V1alpha2__AudioOutConfig__Encoding encoding;
  /*
   * *Required* The sample rate in Hertz of the audio data returned in
   * `audio_out` messages. Valid values are: 16000-24000.
   */
  int32_t sample_rate_hertz;
  /*
   * *Required* Current volume setting of the device's audio output.
   * Valid values are 1 to 100 (corresponding to 1% to 100%).
   */
  int32_t volume_percentage;
};
#define GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__AUDIO_OUT_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__assistant__embedded__v1alpha2__audio_out_config__descriptor) \
    , GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__AUDIO_OUT_CONFIG__ENCODING__ENCODING_UNSPECIFIED, 0, 0 }


/*
 * Specifies the desired format for the server to use when it returns
 * `screen_out` response.
 */
struct  _Google__Assistant__Embedded__V1alpha2__ScreenOutConfig
{
  ProtobufCMessage base;
  /*
   * Current visual screen-mode for the device while issuing the query.
   */
  Google__Assistant__Embedded__V1alpha2__ScreenOutConfig__ScreenMode screen_mode;
};
#define GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__SCREEN_OUT_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__assistant__embedded__v1alpha2__screen_out_config__descriptor) \
    , GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__SCREEN_OUT_CONFIG__SCREEN_MODE__SCREEN_MODE_UNSPECIFIED }


/*
 * Provides information about the current dialog state.
 */
struct  _Google__Assistant__Embedded__V1alpha2__DialogStateIn
{
  ProtobufCMessage base;
  /*
   * *Required* This field must always be set to the
   * [DialogStateOut.conversation_state][google.assistant.embedded.v1alpha2.DialogStateOut.conversation_state] value that was returned in the prior
   * `Assist` RPC. It should only be omitted (field not set) if there was no
   * prior `Assist` RPC because this is the first `Assist` RPC made by this
   * device after it was first setup and/or a factory-default reset.
   */
  ProtobufCBinaryData conversation_state;
  /*
   * *Required* Language of the request in
   * [IETF BCP 47 syntax](https://tools.ietf.org/html/bcp47) (for example,
   * "en-US"). See [Language Support](https://developers.google.com/assistant/sdk/reference/rpc/languages)
   * for more information. If you have selected a language for this `device_id`
   * using the [Settings](https://developers.google.com/assistant/sdk/reference/assistant-app/assistant-settings)
   * menu in your phone's Google Assistant app, that selection will override
   * this value.
   */
  char *language_code;
  /*
   * *Optional* Location of the device where the query originated.
   */
  Google__Assistant__Embedded__V1alpha2__DeviceLocation *device_location;
  /*
   * *Optional* If true, the server will treat the request as a new conversation
   * and not use state from the prior request. Set this field to true when the
   * conversation should be restarted, such as after a device reboot, or after a
   * significant lapse of time since the prior query.
   */
  protobuf_c_boolean is_new_conversation;
};
#define GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__DIALOG_STATE_IN__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__assistant__embedded__v1alpha2__dialog_state_in__descriptor) \
    , {0,NULL}, (char *)protobuf_c_empty_string, NULL, 0 }


/*
 * *Required* Fields that identify the device to the Assistant.
 * See also:
 * *   [Register a Device - REST
 * API](https://developers.google.com/assistant/sdk/reference/device-registration/register-device-manual)
 * *   [Device Model and Instance
 * Schemas](https://developers.google.com/assistant/sdk/reference/device-registration/model-and-instance-schemas)
 * *   [Device
 * Proto](https://developers.google.com/assistant/sdk/reference/rpc/google.assistant.devices.v1alpha2#device)
 */
struct  _Google__Assistant__Embedded__V1alpha2__DeviceConfig
{
  ProtobufCMessage base;
  /*
   * *Required* Unique identifier for the device. The id length must be 128
   * characters or less. Example: DBCDW098234. This MUST match the device_id
   * returned from device registration. This device_id is used to match against
   * the user's registered devices to lookup the supported traits and
   * capabilities of this device. This information should not change across
   * device reboots. However, it should not be saved across
   * factory-default resets.
   */
  char *device_id;
  /*
   * *Required* Unique identifier for the device model. The combination of
   * device_model_id and device_id must have been previously associated through
   * device registration.
   */
  char *device_model_id;
};
#define GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__DEVICE_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__assistant__embedded__v1alpha2__device_config__descriptor) \
    , (char *)protobuf_c_empty_string, (char *)protobuf_c_empty_string }


/*
 * The audio containing the Assistant's response to the query. Sequential chunks
 * of audio data are received in sequential `AssistResponse` messages.
 */
struct  _Google__Assistant__Embedded__V1alpha2__AudioOut
{
  ProtobufCMessage base;
  /*
   * *Output-only* The audio data containing the Assistant's response to the
   * query. Sequential chunks of audio data are received in sequential
   * `AssistResponse` messages.
   */
  ProtobufCBinaryData audio_data;
};
#define GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__AUDIO_OUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__assistant__embedded__v1alpha2__audio_out__descriptor) \
    , {0,NULL} }


/*
 * The Assistant's visual output response to query. Enabled by
 * `screen_out_config`.
 */
struct  _Google__Assistant__Embedded__V1alpha2__ScreenOut
{
  ProtobufCMessage base;
  /*
   * *Output-only* The format of the provided screen data.
   */
  Google__Assistant__Embedded__V1alpha2__ScreenOut__Format format;
  /*
   * *Output-only* The raw screen data to be displayed as the result of the
   * Assistant query.
   */
  ProtobufCBinaryData data;
};
#define GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__SCREEN_OUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__assistant__embedded__v1alpha2__screen_out__descriptor) \
    , GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__SCREEN_OUT__FORMAT__FORMAT_UNSPECIFIED, {0,NULL} }


/*
 * The response returned to the device if the user has triggered a Device
 * Action. For example, a device which supports the query *Turn on the light*
 * would receive a `DeviceAction` with a JSON payload containing the semantics
 * of the request.
 */
struct  _Google__Assistant__Embedded__V1alpha2__DeviceAction
{
  ProtobufCMessage base;
  /*
   * JSON containing the device command response generated from the triggered
   * Device Action grammar. The format is given by the
   * `action.devices.EXECUTE` intent for a given
   * [trait](https://developers.google.com/assistant/sdk/reference/traits/).
   */
  char *device_request_json;
};
#define GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__DEVICE_ACTION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__assistant__embedded__v1alpha2__device_action__descriptor) \
    , (char *)protobuf_c_empty_string }


/*
 * The estimated transcription of a phrase the user has spoken. This could be
 * a single segment or the full guess of the user's spoken query.
 */
struct  _Google__Assistant__Embedded__V1alpha2__SpeechRecognitionResult
{
  ProtobufCMessage base;
  /*
   * *Output-only* Transcript text representing the words that the user spoke.
   */
  char *transcript;
  /*
   * *Output-only* An estimate of the likelihood that the Assistant will not
   * change its guess about this result. Values range from 0.0 (completely
   * unstable) to 1.0 (completely stable and final). The default of 0.0 is a
   * sentinel value indicating `stability` was not set.
   */
  float stability;
};
#define GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__SPEECH_RECOGNITION_RESULT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__assistant__embedded__v1alpha2__speech_recognition_result__descriptor) \
    , (char *)protobuf_c_empty_string, 0 }


/*
 * The dialog state resulting from the user's query. Multiple of these messages
 * may be received.
 */
struct  _Google__Assistant__Embedded__V1alpha2__DialogStateOut
{
  ProtobufCMessage base;
  /*
   * *Output-only* Supplemental display text from the Assistant. This could be
   * the same as the speech spoken in `AssistResponse.audio_out` or it could
   * be some additional information which aids the user's understanding.
   */
  char *supplemental_display_text;
  /*
   * *Output-only* State information for the subsequent `Assist` RPC. This
   * value should be saved in the client and returned in the
   * [`DialogStateIn.conversation_state`](#dialogstatein) field with the next
   * `Assist` RPC. (The client does not need to interpret or otherwise use this
   * value.) This information should be saved across device reboots. However,
   * this value should be cleared (not saved in the client) during a
   * factory-default reset.
   */
  ProtobufCBinaryData conversation_state;
  /*
   * *Output-only* Specifies the mode of the microphone after this `Assist`
   * RPC is processed.
   */
  Google__Assistant__Embedded__V1alpha2__DialogStateOut__MicrophoneMode microphone_mode;
  /*
   * *Output-only* Updated volume level. The value will be 0 or omitted
   * (indicating no change) unless a voice command such as *Increase the volume*
   * or *Set volume level 4* was recognized, in which case the value will be
   * between 1 and 100 (corresponding to the new volume level of 1% to 100%).
   * Typically, a client should use this volume level when playing the
   * `audio_out` data, and retain this value as the current volume level and
   * supply it in the `AudioOutConfig` of the next `AssistRequest`. (Some
   * clients may also implement other ways to allow the current volume level to
   * be changed, for example, by providing a knob that the user can turn.)
   */
  int32_t volume_percentage;
};
#define GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__DIALOG_STATE_OUT__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__assistant__embedded__v1alpha2__dialog_state_out__descriptor) \
    , (char *)protobuf_c_empty_string, {0,NULL}, GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__DIALOG_STATE_OUT__MICROPHONE_MODE__MICROPHONE_MODE_UNSPECIFIED, 0 }


/*
 * Debugging parameters for the current request.
 */
struct  _Google__Assistant__Embedded__V1alpha2__DebugConfig
{
  ProtobufCMessage base;
  /*
   * When this field is set to true, the `debug_info` field in `AssistResponse`
   * may be populated. However it will significantly increase latency of
   * responses. Do not set this field true in production code.
   */
  protobuf_c_boolean return_debug_info;
};
#define GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__DEBUG_CONFIG__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__assistant__embedded__v1alpha2__debug_config__descriptor) \
    , 0 }


typedef enum {
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__DEVICE_LOCATION__TYPE__NOT_SET = 0,
  GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__DEVICE_LOCATION__TYPE_COORDINATES = 1
    PROTOBUF_C__FORCE_ENUM_TO_BE_INT_SIZE(GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__DEVICE_LOCATION__TYPE)
} Google__Assistant__Embedded__V1alpha2__DeviceLocation__TypeCase;

/*
 * There are three sources of locations. They are used with this precedence:
 * 1. This `DeviceLocation`, which is primarily used for mobile devices with
 *    GPS .
 * 2. Location specified by the user during device setup; this is per-user, per
 *    device. This location is used if `DeviceLocation` is not specified.
 * 3. Inferred location based on IP address. This is used only if neither of the
 *    above are specified.
 */
struct  _Google__Assistant__Embedded__V1alpha2__DeviceLocation
{
  ProtobufCMessage base;
  Google__Assistant__Embedded__V1alpha2__DeviceLocation__TypeCase type_case;
  union {
    /*
     * Latitude and longitude of device.
     */
    Google__Type__LatLng *coordinates;
  };
};
#define GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__DEVICE_LOCATION__INIT \
 { PROTOBUF_C_MESSAGE_INIT (&google__assistant__embedded__v1alpha2__device_location__descriptor) \
    , GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__DEVICE_LOCATION__TYPE__NOT_SET, {0} }


/* Google__Assistant__Embedded__V1alpha2__AssistRequest methods */
void   google__assistant__embedded__v1alpha2__assist_request__init
                     (Google__Assistant__Embedded__V1alpha2__AssistRequest         *message);
size_t google__assistant__embedded__v1alpha2__assist_request__get_packed_size
                     (const Google__Assistant__Embedded__V1alpha2__AssistRequest   *message);
size_t google__assistant__embedded__v1alpha2__assist_request__pack
                     (const Google__Assistant__Embedded__V1alpha2__AssistRequest   *message,
                      uint8_t             *out);
size_t google__assistant__embedded__v1alpha2__assist_request__pack_to_buffer
                     (const Google__Assistant__Embedded__V1alpha2__AssistRequest   *message,
                      ProtobufCBuffer     *buffer);
Google__Assistant__Embedded__V1alpha2__AssistRequest *
       google__assistant__embedded__v1alpha2__assist_request__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__assistant__embedded__v1alpha2__assist_request__free_unpacked
                     (Google__Assistant__Embedded__V1alpha2__AssistRequest *message,
                      ProtobufCAllocator *allocator);
/* Google__Assistant__Embedded__V1alpha2__AssistResponse methods */
void   google__assistant__embedded__v1alpha2__assist_response__init
                     (Google__Assistant__Embedded__V1alpha2__AssistResponse         *message);
size_t google__assistant__embedded__v1alpha2__assist_response__get_packed_size
                     (const Google__Assistant__Embedded__V1alpha2__AssistResponse   *message);
size_t google__assistant__embedded__v1alpha2__assist_response__pack
                     (const Google__Assistant__Embedded__V1alpha2__AssistResponse   *message,
                      uint8_t             *out);
size_t google__assistant__embedded__v1alpha2__assist_response__pack_to_buffer
                     (const Google__Assistant__Embedded__V1alpha2__AssistResponse   *message,
                      ProtobufCBuffer     *buffer);
Google__Assistant__Embedded__V1alpha2__AssistResponse *
       google__assistant__embedded__v1alpha2__assist_response__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__assistant__embedded__v1alpha2__assist_response__free_unpacked
                     (Google__Assistant__Embedded__V1alpha2__AssistResponse *message,
                      ProtobufCAllocator *allocator);
/* Google__Assistant__Embedded__V1alpha2__DebugInfo methods */
void   google__assistant__embedded__v1alpha2__debug_info__init
                     (Google__Assistant__Embedded__V1alpha2__DebugInfo         *message);
size_t google__assistant__embedded__v1alpha2__debug_info__get_packed_size
                     (const Google__Assistant__Embedded__V1alpha2__DebugInfo   *message);
size_t google__assistant__embedded__v1alpha2__debug_info__pack
                     (const Google__Assistant__Embedded__V1alpha2__DebugInfo   *message,
                      uint8_t             *out);
size_t google__assistant__embedded__v1alpha2__debug_info__pack_to_buffer
                     (const Google__Assistant__Embedded__V1alpha2__DebugInfo   *message,
                      ProtobufCBuffer     *buffer);
Google__Assistant__Embedded__V1alpha2__DebugInfo *
       google__assistant__embedded__v1alpha2__debug_info__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__assistant__embedded__v1alpha2__debug_info__free_unpacked
                     (Google__Assistant__Embedded__V1alpha2__DebugInfo *message,
                      ProtobufCAllocator *allocator);
/* Google__Assistant__Embedded__V1alpha2__AssistConfig methods */
void   google__assistant__embedded__v1alpha2__assist_config__init
                     (Google__Assistant__Embedded__V1alpha2__AssistConfig         *message);
size_t google__assistant__embedded__v1alpha2__assist_config__get_packed_size
                     (const Google__Assistant__Embedded__V1alpha2__AssistConfig   *message);
size_t google__assistant__embedded__v1alpha2__assist_config__pack
                     (const Google__Assistant__Embedded__V1alpha2__AssistConfig   *message,
                      uint8_t             *out);
size_t google__assistant__embedded__v1alpha2__assist_config__pack_to_buffer
                     (const Google__Assistant__Embedded__V1alpha2__AssistConfig   *message,
                      ProtobufCBuffer     *buffer);
Google__Assistant__Embedded__V1alpha2__AssistConfig *
       google__assistant__embedded__v1alpha2__assist_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__assistant__embedded__v1alpha2__assist_config__free_unpacked
                     (Google__Assistant__Embedded__V1alpha2__AssistConfig *message,
                      ProtobufCAllocator *allocator);
/* Google__Assistant__Embedded__V1alpha2__AudioInConfig methods */
void   google__assistant__embedded__v1alpha2__audio_in_config__init
                     (Google__Assistant__Embedded__V1alpha2__AudioInConfig         *message);
size_t google__assistant__embedded__v1alpha2__audio_in_config__get_packed_size
                     (const Google__Assistant__Embedded__V1alpha2__AudioInConfig   *message);
size_t google__assistant__embedded__v1alpha2__audio_in_config__pack
                     (const Google__Assistant__Embedded__V1alpha2__AudioInConfig   *message,
                      uint8_t             *out);
size_t google__assistant__embedded__v1alpha2__audio_in_config__pack_to_buffer
                     (const Google__Assistant__Embedded__V1alpha2__AudioInConfig   *message,
                      ProtobufCBuffer     *buffer);
Google__Assistant__Embedded__V1alpha2__AudioInConfig *
       google__assistant__embedded__v1alpha2__audio_in_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__assistant__embedded__v1alpha2__audio_in_config__free_unpacked
                     (Google__Assistant__Embedded__V1alpha2__AudioInConfig *message,
                      ProtobufCAllocator *allocator);
/* Google__Assistant__Embedded__V1alpha2__AudioOutConfig methods */
void   google__assistant__embedded__v1alpha2__audio_out_config__init
                     (Google__Assistant__Embedded__V1alpha2__AudioOutConfig         *message);
size_t google__assistant__embedded__v1alpha2__audio_out_config__get_packed_size
                     (const Google__Assistant__Embedded__V1alpha2__AudioOutConfig   *message);
size_t google__assistant__embedded__v1alpha2__audio_out_config__pack
                     (const Google__Assistant__Embedded__V1alpha2__AudioOutConfig   *message,
                      uint8_t             *out);
size_t google__assistant__embedded__v1alpha2__audio_out_config__pack_to_buffer
                     (const Google__Assistant__Embedded__V1alpha2__AudioOutConfig   *message,
                      ProtobufCBuffer     *buffer);
Google__Assistant__Embedded__V1alpha2__AudioOutConfig *
       google__assistant__embedded__v1alpha2__audio_out_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__assistant__embedded__v1alpha2__audio_out_config__free_unpacked
                     (Google__Assistant__Embedded__V1alpha2__AudioOutConfig *message,
                      ProtobufCAllocator *allocator);
/* Google__Assistant__Embedded__V1alpha2__ScreenOutConfig methods */
void   google__assistant__embedded__v1alpha2__screen_out_config__init
                     (Google__Assistant__Embedded__V1alpha2__ScreenOutConfig         *message);
size_t google__assistant__embedded__v1alpha2__screen_out_config__get_packed_size
                     (const Google__Assistant__Embedded__V1alpha2__ScreenOutConfig   *message);
size_t google__assistant__embedded__v1alpha2__screen_out_config__pack
                     (const Google__Assistant__Embedded__V1alpha2__ScreenOutConfig   *message,
                      uint8_t             *out);
size_t google__assistant__embedded__v1alpha2__screen_out_config__pack_to_buffer
                     (const Google__Assistant__Embedded__V1alpha2__ScreenOutConfig   *message,
                      ProtobufCBuffer     *buffer);
Google__Assistant__Embedded__V1alpha2__ScreenOutConfig *
       google__assistant__embedded__v1alpha2__screen_out_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__assistant__embedded__v1alpha2__screen_out_config__free_unpacked
                     (Google__Assistant__Embedded__V1alpha2__ScreenOutConfig *message,
                      ProtobufCAllocator *allocator);
/* Google__Assistant__Embedded__V1alpha2__DialogStateIn methods */
void   google__assistant__embedded__v1alpha2__dialog_state_in__init
                     (Google__Assistant__Embedded__V1alpha2__DialogStateIn         *message);
size_t google__assistant__embedded__v1alpha2__dialog_state_in__get_packed_size
                     (const Google__Assistant__Embedded__V1alpha2__DialogStateIn   *message);
size_t google__assistant__embedded__v1alpha2__dialog_state_in__pack
                     (const Google__Assistant__Embedded__V1alpha2__DialogStateIn   *message,
                      uint8_t             *out);
size_t google__assistant__embedded__v1alpha2__dialog_state_in__pack_to_buffer
                     (const Google__Assistant__Embedded__V1alpha2__DialogStateIn   *message,
                      ProtobufCBuffer     *buffer);
Google__Assistant__Embedded__V1alpha2__DialogStateIn *
       google__assistant__embedded__v1alpha2__dialog_state_in__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__assistant__embedded__v1alpha2__dialog_state_in__free_unpacked
                     (Google__Assistant__Embedded__V1alpha2__DialogStateIn *message,
                      ProtobufCAllocator *allocator);
/* Google__Assistant__Embedded__V1alpha2__DeviceConfig methods */
void   google__assistant__embedded__v1alpha2__device_config__init
                     (Google__Assistant__Embedded__V1alpha2__DeviceConfig         *message);
size_t google__assistant__embedded__v1alpha2__device_config__get_packed_size
                     (const Google__Assistant__Embedded__V1alpha2__DeviceConfig   *message);
size_t google__assistant__embedded__v1alpha2__device_config__pack
                     (const Google__Assistant__Embedded__V1alpha2__DeviceConfig   *message,
                      uint8_t             *out);
size_t google__assistant__embedded__v1alpha2__device_config__pack_to_buffer
                     (const Google__Assistant__Embedded__V1alpha2__DeviceConfig   *message,
                      ProtobufCBuffer     *buffer);
Google__Assistant__Embedded__V1alpha2__DeviceConfig *
       google__assistant__embedded__v1alpha2__device_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__assistant__embedded__v1alpha2__device_config__free_unpacked
                     (Google__Assistant__Embedded__V1alpha2__DeviceConfig *message,
                      ProtobufCAllocator *allocator);
/* Google__Assistant__Embedded__V1alpha2__AudioOut methods */
void   google__assistant__embedded__v1alpha2__audio_out__init
                     (Google__Assistant__Embedded__V1alpha2__AudioOut         *message);
size_t google__assistant__embedded__v1alpha2__audio_out__get_packed_size
                     (const Google__Assistant__Embedded__V1alpha2__AudioOut   *message);
size_t google__assistant__embedded__v1alpha2__audio_out__pack
                     (const Google__Assistant__Embedded__V1alpha2__AudioOut   *message,
                      uint8_t             *out);
size_t google__assistant__embedded__v1alpha2__audio_out__pack_to_buffer
                     (const Google__Assistant__Embedded__V1alpha2__AudioOut   *message,
                      ProtobufCBuffer     *buffer);
Google__Assistant__Embedded__V1alpha2__AudioOut *
       google__assistant__embedded__v1alpha2__audio_out__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__assistant__embedded__v1alpha2__audio_out__free_unpacked
                     (Google__Assistant__Embedded__V1alpha2__AudioOut *message,
                      ProtobufCAllocator *allocator);
/* Google__Assistant__Embedded__V1alpha2__ScreenOut methods */
void   google__assistant__embedded__v1alpha2__screen_out__init
                     (Google__Assistant__Embedded__V1alpha2__ScreenOut         *message);
size_t google__assistant__embedded__v1alpha2__screen_out__get_packed_size
                     (const Google__Assistant__Embedded__V1alpha2__ScreenOut   *message);
size_t google__assistant__embedded__v1alpha2__screen_out__pack
                     (const Google__Assistant__Embedded__V1alpha2__ScreenOut   *message,
                      uint8_t             *out);
size_t google__assistant__embedded__v1alpha2__screen_out__pack_to_buffer
                     (const Google__Assistant__Embedded__V1alpha2__ScreenOut   *message,
                      ProtobufCBuffer     *buffer);
Google__Assistant__Embedded__V1alpha2__ScreenOut *
       google__assistant__embedded__v1alpha2__screen_out__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__assistant__embedded__v1alpha2__screen_out__free_unpacked
                     (Google__Assistant__Embedded__V1alpha2__ScreenOut *message,
                      ProtobufCAllocator *allocator);
/* Google__Assistant__Embedded__V1alpha2__DeviceAction methods */
void   google__assistant__embedded__v1alpha2__device_action__init
                     (Google__Assistant__Embedded__V1alpha2__DeviceAction         *message);
size_t google__assistant__embedded__v1alpha2__device_action__get_packed_size
                     (const Google__Assistant__Embedded__V1alpha2__DeviceAction   *message);
size_t google__assistant__embedded__v1alpha2__device_action__pack
                     (const Google__Assistant__Embedded__V1alpha2__DeviceAction   *message,
                      uint8_t             *out);
size_t google__assistant__embedded__v1alpha2__device_action__pack_to_buffer
                     (const Google__Assistant__Embedded__V1alpha2__DeviceAction   *message,
                      ProtobufCBuffer     *buffer);
Google__Assistant__Embedded__V1alpha2__DeviceAction *
       google__assistant__embedded__v1alpha2__device_action__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__assistant__embedded__v1alpha2__device_action__free_unpacked
                     (Google__Assistant__Embedded__V1alpha2__DeviceAction *message,
                      ProtobufCAllocator *allocator);
/* Google__Assistant__Embedded__V1alpha2__SpeechRecognitionResult methods */
void   google__assistant__embedded__v1alpha2__speech_recognition_result__init
                     (Google__Assistant__Embedded__V1alpha2__SpeechRecognitionResult         *message);
size_t google__assistant__embedded__v1alpha2__speech_recognition_result__get_packed_size
                     (const Google__Assistant__Embedded__V1alpha2__SpeechRecognitionResult   *message);
size_t google__assistant__embedded__v1alpha2__speech_recognition_result__pack
                     (const Google__Assistant__Embedded__V1alpha2__SpeechRecognitionResult   *message,
                      uint8_t             *out);
size_t google__assistant__embedded__v1alpha2__speech_recognition_result__pack_to_buffer
                     (const Google__Assistant__Embedded__V1alpha2__SpeechRecognitionResult   *message,
                      ProtobufCBuffer     *buffer);
Google__Assistant__Embedded__V1alpha2__SpeechRecognitionResult *
       google__assistant__embedded__v1alpha2__speech_recognition_result__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__assistant__embedded__v1alpha2__speech_recognition_result__free_unpacked
                     (Google__Assistant__Embedded__V1alpha2__SpeechRecognitionResult *message,
                      ProtobufCAllocator *allocator);
/* Google__Assistant__Embedded__V1alpha2__DialogStateOut methods */
void   google__assistant__embedded__v1alpha2__dialog_state_out__init
                     (Google__Assistant__Embedded__V1alpha2__DialogStateOut         *message);
size_t google__assistant__embedded__v1alpha2__dialog_state_out__get_packed_size
                     (const Google__Assistant__Embedded__V1alpha2__DialogStateOut   *message);
size_t google__assistant__embedded__v1alpha2__dialog_state_out__pack
                     (const Google__Assistant__Embedded__V1alpha2__DialogStateOut   *message,
                      uint8_t             *out);
size_t google__assistant__embedded__v1alpha2__dialog_state_out__pack_to_buffer
                     (const Google__Assistant__Embedded__V1alpha2__DialogStateOut   *message,
                      ProtobufCBuffer     *buffer);
Google__Assistant__Embedded__V1alpha2__DialogStateOut *
       google__assistant__embedded__v1alpha2__dialog_state_out__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__assistant__embedded__v1alpha2__dialog_state_out__free_unpacked
                     (Google__Assistant__Embedded__V1alpha2__DialogStateOut *message,
                      ProtobufCAllocator *allocator);
/* Google__Assistant__Embedded__V1alpha2__DebugConfig methods */
void   google__assistant__embedded__v1alpha2__debug_config__init
                     (Google__Assistant__Embedded__V1alpha2__DebugConfig         *message);
size_t google__assistant__embedded__v1alpha2__debug_config__get_packed_size
                     (const Google__Assistant__Embedded__V1alpha2__DebugConfig   *message);
size_t google__assistant__embedded__v1alpha2__debug_config__pack
                     (const Google__Assistant__Embedded__V1alpha2__DebugConfig   *message,
                      uint8_t             *out);
size_t google__assistant__embedded__v1alpha2__debug_config__pack_to_buffer
                     (const Google__Assistant__Embedded__V1alpha2__DebugConfig   *message,
                      ProtobufCBuffer     *buffer);
Google__Assistant__Embedded__V1alpha2__DebugConfig *
       google__assistant__embedded__v1alpha2__debug_config__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__assistant__embedded__v1alpha2__debug_config__free_unpacked
                     (Google__Assistant__Embedded__V1alpha2__DebugConfig *message,
                      ProtobufCAllocator *allocator);
/* Google__Assistant__Embedded__V1alpha2__DeviceLocation methods */
void   google__assistant__embedded__v1alpha2__device_location__init
                     (Google__Assistant__Embedded__V1alpha2__DeviceLocation         *message);
size_t google__assistant__embedded__v1alpha2__device_location__get_packed_size
                     (const Google__Assistant__Embedded__V1alpha2__DeviceLocation   *message);
size_t google__assistant__embedded__v1alpha2__device_location__pack
                     (const Google__Assistant__Embedded__V1alpha2__DeviceLocation   *message,
                      uint8_t             *out);
size_t google__assistant__embedded__v1alpha2__device_location__pack_to_buffer
                     (const Google__Assistant__Embedded__V1alpha2__DeviceLocation   *message,
                      ProtobufCBuffer     *buffer);
Google__Assistant__Embedded__V1alpha2__DeviceLocation *
       google__assistant__embedded__v1alpha2__device_location__unpack
                     (ProtobufCAllocator  *allocator,
                      size_t               len,
                      const uint8_t       *data);
void   google__assistant__embedded__v1alpha2__device_location__free_unpacked
                     (Google__Assistant__Embedded__V1alpha2__DeviceLocation *message,
                      ProtobufCAllocator *allocator);
/* --- per-message closures --- */

typedef void (*Google__Assistant__Embedded__V1alpha2__AssistRequest_Closure)
                 (const Google__Assistant__Embedded__V1alpha2__AssistRequest *message,
                  void *closure_data);
typedef void (*Google__Assistant__Embedded__V1alpha2__AssistResponse_Closure)
                 (const Google__Assistant__Embedded__V1alpha2__AssistResponse *message,
                  void *closure_data);
typedef void (*Google__Assistant__Embedded__V1alpha2__DebugInfo_Closure)
                 (const Google__Assistant__Embedded__V1alpha2__DebugInfo *message,
                  void *closure_data);
typedef void (*Google__Assistant__Embedded__V1alpha2__AssistConfig_Closure)
                 (const Google__Assistant__Embedded__V1alpha2__AssistConfig *message,
                  void *closure_data);
typedef void (*Google__Assistant__Embedded__V1alpha2__AudioInConfig_Closure)
                 (const Google__Assistant__Embedded__V1alpha2__AudioInConfig *message,
                  void *closure_data);
typedef void (*Google__Assistant__Embedded__V1alpha2__AudioOutConfig_Closure)
                 (const Google__Assistant__Embedded__V1alpha2__AudioOutConfig *message,
                  void *closure_data);
typedef void (*Google__Assistant__Embedded__V1alpha2__ScreenOutConfig_Closure)
                 (const Google__Assistant__Embedded__V1alpha2__ScreenOutConfig *message,
                  void *closure_data);
typedef void (*Google__Assistant__Embedded__V1alpha2__DialogStateIn_Closure)
                 (const Google__Assistant__Embedded__V1alpha2__DialogStateIn *message,
                  void *closure_data);
typedef void (*Google__Assistant__Embedded__V1alpha2__DeviceConfig_Closure)
                 (const Google__Assistant__Embedded__V1alpha2__DeviceConfig *message,
                  void *closure_data);
typedef void (*Google__Assistant__Embedded__V1alpha2__AudioOut_Closure)
                 (const Google__Assistant__Embedded__V1alpha2__AudioOut *message,
                  void *closure_data);
typedef void (*Google__Assistant__Embedded__V1alpha2__ScreenOut_Closure)
                 (const Google__Assistant__Embedded__V1alpha2__ScreenOut *message,
                  void *closure_data);
typedef void (*Google__Assistant__Embedded__V1alpha2__DeviceAction_Closure)
                 (const Google__Assistant__Embedded__V1alpha2__DeviceAction *message,
                  void *closure_data);
typedef void (*Google__Assistant__Embedded__V1alpha2__SpeechRecognitionResult_Closure)
                 (const Google__Assistant__Embedded__V1alpha2__SpeechRecognitionResult *message,
                  void *closure_data);
typedef void (*Google__Assistant__Embedded__V1alpha2__DialogStateOut_Closure)
                 (const Google__Assistant__Embedded__V1alpha2__DialogStateOut *message,
                  void *closure_data);
typedef void (*Google__Assistant__Embedded__V1alpha2__DebugConfig_Closure)
                 (const Google__Assistant__Embedded__V1alpha2__DebugConfig *message,
                  void *closure_data);
typedef void (*Google__Assistant__Embedded__V1alpha2__DeviceLocation_Closure)
                 (const Google__Assistant__Embedded__V1alpha2__DeviceLocation *message,
                  void *closure_data);

/* --- services --- */

typedef struct _Google__Assistant__Embedded__V1alpha2__EmbeddedAssistant_Service Google__Assistant__Embedded__V1alpha2__EmbeddedAssistant_Service;
struct _Google__Assistant__Embedded__V1alpha2__EmbeddedAssistant_Service
{
  ProtobufCService base;
  void (*assist)(Google__Assistant__Embedded__V1alpha2__EmbeddedAssistant_Service *service,
                 const Google__Assistant__Embedded__V1alpha2__AssistRequest *input,
                 Google__Assistant__Embedded__V1alpha2__AssistResponse_Closure closure,
                 void *closure_data);
};
typedef void (*Google__Assistant__Embedded__V1alpha2__EmbeddedAssistant_ServiceDestroy)(Google__Assistant__Embedded__V1alpha2__EmbeddedAssistant_Service *);
void google__assistant__embedded__v1alpha2__embedded_assistant__init (Google__Assistant__Embedded__V1alpha2__EmbeddedAssistant_Service *service,
                                                                      Google__Assistant__Embedded__V1alpha2__EmbeddedAssistant_ServiceDestroy destroy);
#define GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__EMBEDDED_ASSISTANT__BASE_INIT \
    { &google__assistant__embedded__v1alpha2__embedded_assistant__descriptor, protobuf_c_service_invoke_internal, NULL }
#define GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__EMBEDDED_ASSISTANT__INIT(function_prefix__) \
    { GOOGLE__ASSISTANT__EMBEDDED__V1ALPHA2__EMBEDDED_ASSISTANT__BASE_INIT,\
      function_prefix__ ## assist  }
void google__assistant__embedded__v1alpha2__embedded_assistant__assist(ProtobufCService *service,
                                                                       const Google__Assistant__Embedded__V1alpha2__AssistRequest *input,
                                                                       Google__Assistant__Embedded__V1alpha2__AssistResponse_Closure closure,
                                                                       void *closure_data);

/* --- descriptors --- */

extern const ProtobufCMessageDescriptor google__assistant__embedded__v1alpha2__assist_request__descriptor;
extern const ProtobufCMessageDescriptor google__assistant__embedded__v1alpha2__assist_response__descriptor;
extern const ProtobufCEnumDescriptor    google__assistant__embedded__v1alpha2__assist_response__event_type__descriptor;
extern const ProtobufCMessageDescriptor google__assistant__embedded__v1alpha2__debug_info__descriptor;
extern const ProtobufCMessageDescriptor google__assistant__embedded__v1alpha2__assist_config__descriptor;
extern const ProtobufCMessageDescriptor google__assistant__embedded__v1alpha2__audio_in_config__descriptor;
extern const ProtobufCEnumDescriptor    google__assistant__embedded__v1alpha2__audio_in_config__encoding__descriptor;
extern const ProtobufCMessageDescriptor google__assistant__embedded__v1alpha2__audio_out_config__descriptor;
extern const ProtobufCEnumDescriptor    google__assistant__embedded__v1alpha2__audio_out_config__encoding__descriptor;
extern const ProtobufCMessageDescriptor google__assistant__embedded__v1alpha2__screen_out_config__descriptor;
extern const ProtobufCEnumDescriptor    google__assistant__embedded__v1alpha2__screen_out_config__screen_mode__descriptor;
extern const ProtobufCMessageDescriptor google__assistant__embedded__v1alpha2__dialog_state_in__descriptor;
extern const ProtobufCMessageDescriptor google__assistant__embedded__v1alpha2__device_config__descriptor;
extern const ProtobufCMessageDescriptor google__assistant__embedded__v1alpha2__audio_out__descriptor;
extern const ProtobufCMessageDescriptor google__assistant__embedded__v1alpha2__screen_out__descriptor;
extern const ProtobufCEnumDescriptor    google__assistant__embedded__v1alpha2__screen_out__format__descriptor;
extern const ProtobufCMessageDescriptor google__assistant__embedded__v1alpha2__device_action__descriptor;
extern const ProtobufCMessageDescriptor google__assistant__embedded__v1alpha2__speech_recognition_result__descriptor;
extern const ProtobufCMessageDescriptor google__assistant__embedded__v1alpha2__dialog_state_out__descriptor;
extern const ProtobufCEnumDescriptor    google__assistant__embedded__v1alpha2__dialog_state_out__microphone_mode__descriptor;
extern const ProtobufCMessageDescriptor google__assistant__embedded__v1alpha2__debug_config__descriptor;
extern const ProtobufCMessageDescriptor google__assistant__embedded__v1alpha2__device_location__descriptor;
extern const ProtobufCServiceDescriptor google__assistant__embedded__v1alpha2__embedded_assistant__descriptor;

PROTOBUF_C__END_DECLS


#endif  /* PROTOBUF_C_google_2fassistant_2fembedded_2fv1alpha2_2fembedded_5fassistant_2eproto__INCLUDED */
